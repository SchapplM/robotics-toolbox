% Ableitung der kinematischen Zwangsbedingungen nach den Gelenkwinkeln
% Bezeichnungen: 
% * Jacobi-Matrix der inversen Kinematik, 
% * geometrische Matrix der inversen Kinematik
% 
% Variante 3:
% Implementierung mit Führungs-Beinkette und Folge-Beinketten
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phi_q_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_q [6xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
% 
% Annahme: Funktioniert aktuell wahrscheinlich nur für 3T2R-PKM
%
% Diese Datei ist identisch mit: ParRob/constr3grad_q.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.


% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_q_red, Phi_q] = %PN%_constr3grad_q(q, xE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(6,1), struct(
%$cgargs       'I_EE_Task', true(1,6),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}
               
s_1 = struct(...
                   'T_P_E', s.T_P_E,...
               'r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
               
s_2 = struct(...
               'I_EE_Task', s.I_EE_Task,...
             'phi_P_B_all', s.phi_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
%% Aufruf der Unterfunktionen
% Die Unterfunktionen sind nach ZB-Art sortiert, in der Ausgabevariablen
% ist die Sortierung nach Beingruppen (ZB Bein 1, ZB Bein 2, ...)
[Phi_tq_red,Phi_tq]=%PN%_constr2grad_tq(q, s_1); % Translation identisch mit Var. 2
[Phi_rq_red,Phi_rq]=%PN%_constr3grad_rq(q, xE, s_2);

% Anzahl ZB
% TODO: Das funktioniert wahrscheinlich nicht bei allen asymmetrischen PKM,
% falls planare Roboter modelliert werden.
nPhit = floor(size(Phi_tq_red,1)/%NLEG%); % TODO: Setzt symmetrische PKM vorraus
nPhir = floor(size(Phi_rq_red,1)/%NLEG%); % TODO: Setzt symmetrische PKM vorraus
nPhi = nPhit + nPhir;

%% Initialisierung mit Fallunterscheidung für symbolische Eingabe
% Sortierung der ZB-Zeilen in den Matrizen nach Beingruppen, nicht nach ZB-Art
dim_Pq_red=[size(Phi_tq_red,1) + size(Phi_rq_red ,1), size(Phi_rq_red,2)];
dim_Pq =   [size(Phi_tq,1)     + size(Phi_rq,1),      size(Phi_rq,    2)];


Phi_q_red = NaN(dim_Pq_red);
Phi_q =     NaN(dim_Pq);


%% Belegung der Ausgabe
for i = 1:%NLEG%
  if all(s.I_EE_Task == [1 1 1 1 1 0])
    if i == 1 % Führungskette: Reduzierte FG um Rotation
      Phi_q_red(1:5, :) = ...
        [Phi_tq_red((i-1)*nPhit+1:(i)*nPhit, :); ...
         Phi_rq_red(1:2, :)];
    else % Folgekette: Alle weiteren Ketten 6 Zwangsbedingungen
      Phi_q_red(6+6*(i-2):5+6*(i-1), :) = ...
        [Phi_tq_red((i-1)*nPhit+1:(i)*nPhit, :); ...
         Phi_rq_red(3+3*(i-2):5+3*(i-2), :)];
    end
  else
    Phi_q_red((i-1)*nPhi+1:(i)*nPhi, :) = ...
      [Phi_tq_red((i-1)*nPhit+1:(i)*nPhit, :); ...
       Phi_rq_red((i-1)*nPhir+1:(i)*nPhir, :)];
  end
  Phi_q((i-1)*6+1:(i)*6, :) = ...
    [Phi_tq((i-1)*3+1:(i)*3, :); ...
     Phi_rq((i-1)*3+1:(i)*3, :)];
end
