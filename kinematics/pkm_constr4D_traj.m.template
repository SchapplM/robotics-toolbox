% Zeitableitung der kinematischen Zwangsbedingungen einer Trajektorie
% Variante 4:
% * Bezogen auf Winkelgeschwindigkeit des Koppelpunktes Bi
%   (effektiv werden die Geschw.-ZB nach den Gelenk-Geschw. abgeleitet)
% 
% Eingabe:
% Q:
%   Gelenkkoordinaten (Trajektorie)
% QD:
%   Gelenkgeschwindigkeiten (Trajektorie)
% XE
%   Trajektorie von EE-Lagen
% XDE
%   Trajektorie von EE-Geschwindigkeiten
%   (Die Orientierung wird durch Euler-Winkel-Zeitableitung dargestellt)
% s:
%   Struktur mit Einstellungen für diese Funktion. Enthält die Parameter
%   des Roboters, die sonst in der ParRob-Klasse gespeichert sind.
% 
% Ausgabe:
% PhiD
%   Ableitung der kinematischen Zwangsbedingungen nach der Zeit
%   für alle Zeitschritte der Trajektorie der Eingabedaten
%   Keine reduzierten Einträge. Gebe immer alle möglichen Zwangsbedingungen an.
% 
% Diese Datei ist identisch mit: ParRob/constr4D.m mit dem Zusatz für Trajektorien
% Hier Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2020-08
% (C) Institut für Mechatronische Systeme, Leibniz Universität Hannover

function PHID = %PN%_constr4D_traj(Q, QD, X, XD, s)

%% Coder Information
%#codegen
%$cgargs {coder.newtype('double',[inf,%NJ%]), coder.newtype('double',[inf,%NJ%]), 
%$cgargs coder.newtype('double',[inf,6]), coder.newtype('double',[inf,6]), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs  'I_constr_t', coder.newtype('double',[1,inf]),
%$cgargs  'I_constr_r', coder.newtype('double',[1,inf]),
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs           'T_P_E', eye(4),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', uint8(zeros(%NLEG%,1)),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1))}

%% Initialisierung

% Eingabestruktur für %PN%_constr1D_trans
s1Dt = struct( ...
      'I_EE', s.I_EE,...
      'r_P_B_all', s.r_P_B_all,...
      'T_P_E', s.T_P_E, ...
      'Leg_pkin_gen', s.Leg_pkin_gen,...
      'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
      'Leg_I_EElink', s.Leg_I_EElink,...
      'Leg_I_EE_Task', s.Leg_I_EE_Task,...
      'Leg_phi_W_0', s.Leg_phi_W_0,...
      'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
      'Leg_NQJ', s.Leg_NQJ);
% Eingabestruktur für %PN%_constr4D_rot
s4Dr = struct( ...
      'I_EE', s.I_EE,...
      'I_constr_r_red', s.I_constr_r_red, ...
      'r_P_B_all', s.r_P_B_all,...
      'T_P_E', s.T_P_E, ...
      'Leg_pkin_gen', s.Leg_pkin_gen,...
      'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
      'Leg_I_EElink', s.Leg_I_EElink,...
      'Leg_I_EE_Task', s.Leg_I_EE_Task,...
      'Leg_phi_W_0', s.Leg_phi_W_0,...
      'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
      'Leg_NQJ', s.Leg_NQJ);
%% Zwangsbedingungs-Zeitableitung für Trajektorie berechnen
PHID = NaN(size(Q,1), 6*%NLEG%);
for i = 1:size(Q,1)
  q = Q(i,:)';
  qD = QD(i,:)';
  x = X(i,:)';
  xD = XD(i,:)';
  [~,Phi1Dtrans_i] = %PN%_constr1D_trans(q, qD, x, xD, s1Dt);
  [~,Phi4Drot_i] = %PN%_constr4D_rot(q, qD, x, xD, s4Dr);
  Phi_i = NaN(6*%NLEG%,1);
  Phi_i(s.I_constr_t) = Phi1Dtrans_i;
  Phi_i(s.I_constr_r) = Phi4Drot_i;
  PHID(i,:) = Phi_i;
end
