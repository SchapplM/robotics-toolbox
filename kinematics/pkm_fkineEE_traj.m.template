% Direkte Kinematik für komplette Trajektorie berechnen (auch Geschwin-
% digkeit und Beschleunigung. Basierend auf der direkten Kinematik einer Beinkette.
% 
% Eingabe:
% Q:
%   Gelenkkoordinaten (Trajektorie)
% QD:
%   Gelenkgeschwindigkeiten (Trajektorie)
% QDD:
%   Gelenkbeschleunigung (Trajektorie)
% iLeg:
%   Index der Beinkette, für die die direkte Kinematik bestimmt wird.
% s:
%   Struktur mit Einstellungen für diese Funktion. Enthält die Parameter
%   des Roboters, die sonst in der ParRob-Klasse gespeichert sind.
% 
% Ausgabe:
% XE
%   Trajektorie von EE-Lagen
% XDE
%   Trajektorie von EE-Geschwindigkeiten
%   (Die Orientierung wird durch Euler-Winkel-Zeitableitung dargestellt)
% XDDE
%   Trajektorie von EE-Beschleunigungen
%   Orientierung bezogen auf Euler-Winkel
% 
% Diese Datei ist identisch mit ParRob/fkineEE (in ParRob.m)
% Hier Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2020-08
% (C) Institut für Mechatronische Systeme, Leibniz Universität Hannover

function [X, XD, XDD] = %PN%_fkineEE(Q, QD, QDD, iLeg, s)

%% Coder Information
%#codegen
%$cgargs {coder.newtype('double',[inf,%NJ%]),
%$cgargs coder.newtype('double',[inf,%NJ%]),
%$cgargs coder.newtype('double',[inf,%NJ%]),
%$cgargs uint8(1), struct(
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', uint8(zeros(%NLEG%,1)),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1))}
assert(size(Q,2) == %NJ%, 'Q muss nt x %NJ% sein');
assert(size(QD,2) == %NJ%, 'QD muss nt x %NJ% sein');
assert(size(QDD,2) == %NJ%, 'QDD muss nt x %NJ% sein');
assert(isscalar(iLeg)&&isa(iLeg,'uint8'), 'iLeg muss 1x1 uint8 sein');

%% Initialisierung
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
if nargin < 5, iLeg = 1; end
X = NaN(size(Q,1),6);
XD = X; XDD = X;

%% Algorithmus
% Transformation zum KS: Siehe fkine_legs
Leg_T_0_W = [eulxyz2r(s.Leg_T_0_W_vec(1:3,iLeg)),s.Leg_T_0_W_vec(4:6,iLeg);[0 0 0 1]];
T_0_A1 = invtr(Leg_T_0_W); % von PKM-Basis zu Beinketten-Basis
r_P_P_B1 = s.r_P_B_all(:,iLeg);
R_P_B1 = eulxyz2r(s.phi_P_B_all(:,iLeg));
T_P_B1 = rt2tr(R_P_B1, r_P_P_B1); % Plattform-KS zu Plattform-Koppel-KS
T_B1_E = invtr(T_P_B1) * s.T_P_E; % Plf-Koppel-KS zu Plattform-EE-KS
for i = 1:size(Q,1)
  q1_i   = Q(i,I1J_LEG(iLeg):I2J_LEG(iLeg))';
  % Fußpunktkoordinaten
  Leg_T_0_W = [eulxyz2r(s.Leg_T_0_W_vec(1:3,iLeg)),s.Leg_T_0_W_vec(4:6,iLeg);[0 0 0 1]];
  Leg_T_W_O = invtr(Leg_T_0_W);
  r_0_0_Ai = Leg_T_W_O(1:3,4);
  phi_0_Ai = s.Leg_phi_W_0(:,iLeg);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(iLeg));
  
  % Direkte Kinematik der Beinkette
  Tc_0 = %SN%_fkine_fixb_rotmat_mdh_sym_varpar(q1_i, s.Leg_pkin_gen(iLeg,:)');
  Leg_T_N_E = [eulxyz2r(s.Leg_T_N_E_vec(1:3,iLeg)),s.Leg_T_N_E_vec(4:6,iLeg);[0 0 0 1]];
  T_A1_E1 = Tc_0(:,:,s.Leg_I_EElink(iLeg)+1)*Leg_T_N_E;
  T_0_E1 = T_0_A1*T_A1_E1;
  % Annahme: E1 (virt. EE der Beinkette) = B1 (Koppelgelenk-KS);
  % (setzt erfüllte kinematische Zwangsbedingungen voraus)
  T_0_E = T_0_E1*T_B1_E;
  X(i,:) = [T_0_E(1:3,4); r2eulxyz(T_0_E(1:3,1:3))];
  if nargout < 2, continue; end % Keine Geschwindigkeit gefragt
  qD1_i  = QD(i,I1J_LEG(iLeg):I2J_LEG(iLeg))';
  % Geschwindigkeit der ersten Beinkette umrechnen auf PKM-Plattform
  Jg = %SN%_jacobig_sym_varpar(q1_i, s.Leg_I_EElink(iLeg),Leg_T_N_E(1:3,4),s.Leg_pkin_gen(iLeg,:)'); % geom. Jacobi der Beinkette (bez. auf Beinketten-Basis)
  % Geschw. des virt. Beinketten-EE bezogen auf PKM-Basis
  V_0_E1 = rotate_wrench(Jg*qD1_i, t2r(T_0_A1));
  % Umrechnen auf PKM-EE mit Adjunkt-Jacobi-Matrix
  r_0_E1_E = t2r(T_0_E1) * T_B1_E(1:3,4);
  V_0_E = adjoint_jacobian(r_0_E1_E) * V_0_E1;
  % Umrechnen auf Euler-Winkel-Zeitableitung bezogen auf PKM-Koord.
  Tw = eulxyzjac(X(i,4:6)');
  XD(i,:) = [V_0_E(1:3); Tw\V_0_E(4:6)];
  if nargout < 3, continue; end % Keine Beschleunigung gefragt
  qDD1_i = QDD(i,I1J_LEG(iLeg):I2J_LEG(iLeg))';
  % Beschleunigung der ersten Beinkette
  JgD = %SN%_jacobigD_sym_varpar(q1_i, qD1_i, s.Leg_I_EElink(iLeg), Leg_T_N_E(1:3,4), s.Leg_pkin_gen(iLeg,:)');
  VD_0_E1 = rotate_wrench(Jg*qDD1_i+JgD*qD1_i, t2r(T_0_A1));
  % Umrechnen auf PKM-EE
  VD_0_E = adjointD_jacobian(t2r(T_0_E1)'*r_0_E1_E, t2r(T_0_E1), V_0_E1(4:6)) * V_0_E1 + ...
           adjoint_jacobian(r_0_E1_E) * VD_0_E1;
  TwD = eulxyzjacD(X(i,4:6)', XD(i,4:6)');
  XDD(i,:) = [VD_0_E(1:3); Tw\(VD_0_E(4:6)-TwD*XD(i,4:6)')];
end
