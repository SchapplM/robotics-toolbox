% Ableitung der Rotationskomponente kinematischen ZB nach den Gelenkwinkeln
% Bezeichnungen: Rotatorischer Teil der ...
% * Jacobi-Matrix der inversen Kinematik, 
% * geometrische Matrix der inversen Kinematik
% (ist in der Literatur wenig gebräuchlich)
% 
% Variante 3:
% Implementierung mit Führungs-Beinkette und Folge-Beinketten
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phi_q_red_l
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   der Führungs-Beinkette
% Phi_q_red_f
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   der Folge-Beinkette
%   Rotatorischer Teil
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_q_l, Phi_q_f [3xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
%
% Diese Datei ist identisch mit: ParRob/constr3grad_rq.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.


% Quellen:
% [2_SchapplerTapOrt2019a] Schappler, M. et al.: Modeling Parallel Robot
% Kinematics for 3T2R and 3T3R Tasks using Reciprocal Sets of Euler Angles
% (Arbeitstitel), Submitted to MDPI Robotics KaRD2, Version of 27.06.2019
% [SchapplerTapOrt2019] Schappler, M. et al.: Resolution of Functional
% Redundancy for 3T2R Robot Tasks using Two Sets of Reciprocal Euler
% Angles, Proc. of the 15th IFToMM World Congress, 2019
% [A] Aufzeichnungen Schappler vom 21.06.2018
% [B] Aufzeichnungen Schappler vom 13.07.2018
% [C] Aufzeichnungen Schappler vom 27.07.2018
% [D] Aufzeichnungen Schappler vom 02.02.2019

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phipq_red, Phipq] = %PN%_constr3grad_rq(q, xE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(6,1), struct(
%$cgargs       'I_EE_Task', true(1,6),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung
NLEG = %NLEG%;
I_EE = %I_EE%;
NJ = %NJ%;
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
Leg_I_EElink = %Leg_I_EElink%;
Leg_NQJ = %Leg_NQJ%;

%% Initialisierung mit Fallunterscheidung für symbolische Eingabe
% Endergebnis, siehe Gl. (B.30)
rownum_Phipq_red = sum(s.Leg_I_EE_Task(1,4:6))+... % für Führungskette
  sum(sum(s.Leg_I_EE_Task(2:end,4:6))); % für Folgeketten
Phipq = zeros(3*NLEG,NJ);
Phipq_red = zeros(rownum_Phipq_red,NJ);
R_0_L_q_L = zeros(3,3);
dRb_0L_dq = NaN(9, Leg_NQJ(1));

%% Berechnung

R_P_E = s.T_P_E(1:3,1:3);
R_0_E_x = eul2r(xE(4:6), s.phiconv_W_E);
[~,phiconv_W_E_reci] = euler_angle_properties(s.phiconv_W_E);

% Index der Phi_red 
K1 = 1;

for iLeg = 1:NLEG
  % Anteil der ZB-Gleichung der Gelenkkette
  IJ_i = I1J_LEG(iLeg):I2J_LEG(iLeg);
  qs = q(IJ_i); % Gelenkwinkel dieser Kette
  T_0i_Ni = %SN%_fkine_fixb_body_rotmat_mdh_sym_varpar(qs, Leg_I_EElink(iLeg), s.Leg_pkin_gen(iLeg,:)');
  Leg_T_N_E = [eulxyz2r(s.Leg_T_N_E_vec(1:3,iLeg)),s.Leg_T_N_E_vec(4:6,iLeg);[0 0 0 1]];
  T_0i_Bi = T_0i_Ni*Leg_T_N_E;
  
  phi_0_Ai = s.Leg_phi_W_0(:,iLeg);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(iLeg));
  R_P_Bi = eulxyz2r(s.phi_P_B_all(:,iLeg));
  R_Bi_P = R_P_Bi.';
  
  %% (III) Ableitung der Rotationsmatrix nach q
  % Ableitung der Koppel-KS-Rotationsmatrix der aktuellen Beinkette nach
  % den Gelenkwinkeln der aktuellen Beinkette
  % Term III aus Gl. (D.22) bzw. (D.24)
  % Term III aus Gl. (B.31): Ableitung der Rotationsmatrix R_0_E nach q
  % Berücksichtigung der zusätzlichen Transformation RS.T_N_E: Gl. (C.7)
  % bzw. [SchapplerTapOrt2019]/(32)
  % (jacobiR berücksichtigt diese Rotation nicht; ist definiert zum letzten
  % Körper-KS N der seriellen Kette. Hier werden dadurch direkt zwei
  % Transformationen berücksichtigt: N->Bi->E
  % RS.T_N_E bezieht sich auf den "Endeffektor" der Beinkette, der "Bi" ist.
  % Gl. (B.33)
  
  R_Ni_E = Leg_T_N_E(1:3,1:3) * R_Bi_P * R_P_E;
  b11=R_Ni_E(1,1);b12=R_Ni_E(1,2);b13=R_Ni_E(1,3);
  b21=R_Ni_E(2,1);b22=R_Ni_E(2,2);b23=R_Ni_E(2,3);
  b31=R_Ni_E(3,1);b32=R_Ni_E(3,2);b33=R_Ni_E(3,3);
  dPidRb1 = [b11 0 0 b21 0 0 b31 0 0; 0 b11 0 0 b21 0 0 b31 0; 0 0 b11 0 0 b21 0 0 b31; b12 0 0 b22 0 0 b32 0 0; 0 b12 0 0 b22 0 0 b32 0; 0 0 b12 0 0 b22 0 0 b32; b13 0 0 b23 0 0 b33 0 0; 0 b13 0 0 b23 0 0 b33 0; 0 0 b13 0 0 b23 0 0 b33;];
  dRb_0iN_dq = %SN%_jacobiR_rot_sym_varpar(qs,  Leg_I_EElink(iLeg), s.Leg_pkin_gen(iLeg,:)');
  dRb_0iE_dq = dPidRb1 * dRb_0iN_dq;
  
  % Bezug auf Basis-KS der PKM und nicht Basis des seriellen Roboters
  % Matrix-Produkt aus rmatvecprod_diff_rmatvec2_matlab.m, siehe Gl. (A.13)
  a11=R_0_0i(1,1);a12=R_0_0i(1,2);a13=R_0_0i(1,3);
  a21=R_0_0i(2,1);a22=R_0_0i(2,2);a23=R_0_0i(2,3);
  a31=R_0_0i(3,1);a32=R_0_0i(3,2);a33=R_0_0i(3,3);
  dPidRb2 = [a11 a12 a13 0 0 0 0 0 0; a21 a22 a23 0 0 0 0 0 0; a31 a32 a33 0 0 0 0 0 0; 0 0 0 a11 a12 a13 0 0 0; 0 0 0 a21 a22 a23 0 0 0; 0 0 0 a31 a32 a33 0 0 0; 0 0 0 0 0 0 a11 a12 a13; 0 0 0 0 0 0 a21 a22 a23; 0 0 0 0 0 0 a31 a32 a33;];
  dRb_0E_dq = dPidRb2 * dRb_0iE_dq; 
  
  if iLeg == 1 % ZB für Führungskette; entspricht constr2grad_rq.m
    % Kinematik, Definitionen
    R_0_L_q_L = R_0_0i * T_0i_Bi(1:3,1:3) * R_Bi_P * R_P_E; % [2_SchapplerTapOrt2019a]/(26)
    R_Ex_Eq = R_0_E_x' * R_0_L_q_L;

    % Abspeichern der für jede Beinkette berechneten Ableitung für die
    % Führungskette (siehe unten)
    dRb_0L_dq(:,:) = dRb_0E_dq;

    %% (II) Innere Ableitung des Matrix-Produktes
    % Term II aus Gl. (C.49) bzw. aus [2_SchapplerTapOrt2019a]/(34)
    % Die Matrix R_0_E_x wird transponiert eingesetzt.
    % aus rmatvecprod_diff_rmatvec2_matlab.m
    a11=R_0_E_x(1,1);a12=R_0_E_x(2,1);a13=R_0_E_x(3,1);
    a21=R_0_E_x(1,2);a22=R_0_E_x(2,2);a23=R_0_E_x(3,2);
    a31=R_0_E_x(1,3);a32=R_0_E_x(2,3);a33=R_0_E_x(3,3);
    dPidRb2 = [a11 a12 a13 0 0 0 0 0 0; a21 a22 a23 0 0 0 0 0 0; a31 a32 a33 0 0 0 0 0 0; 0 0 0 a11 a12 a13 0 0 0; 0 0 0 a21 a22 a23 0 0 0; 0 0 0 a31 a32 a33 0 0 0; 0 0 0 0 0 0 a11 a12 a13; 0 0 0 0 0 0 a21 a22 a23; 0 0 0 0 0 0 a31 a32 a33;];

    %% (I) Ableitung der Euler-Winkel nach der Rot.-matrix
    % Term I aus Gl. (C.49) bzw. aus [2_SchapplerTapOrt2019a]/(34) 
    % (ZYX-Euler-Winkel des Orientierungsfehlers)
    % Aus eulzyx_diff_rmatvec_matlab.m
    % Unabhängig vom Roboter (nur von Orientierungsdarstellung)
    dphidRb = eul_diff_rotmat(R_Ex_Eq, phiconv_W_E_reci);

    %% Gesamtergebnis (für Führungskette)
    % Gl. [2_SchapplerTapOrt2019a]/(34)
    Phi_phi_i_Gradq = dphidRb * dPidRb2 * dRb_0E_dq; % Gl. (C.49)  
    % In Endergebnis einsetzen
    I1 = 1+3*(iLeg-1); % I: Zeilen der Ergebnisvariable: Alle rotatorischen ZB
    I2 = I1+2; % drei rotatorische Einträge
    J1 = I1J_LEG(iLeg); % J: Spalten der Ergebnisvariable: Alle Gelenke
    J2 = I2J_LEG(iLeg); % so viele Einträge wie Beine in der Kette
    Phipq(I1:I2,J1:J2) = Phi_phi_i_Gradq;

    K1 = 1; % Wiederholung für mex-Coder (genau wie Zuweisungen unten)
    if all(s.Leg_I_EE_Task(iLeg,4:6) == [1 1 0]) % 3T2R mit Aufg.-Red
      K2 = 2;
      Phipq_red(K1:K2,J1:J2) = Phi_phi_i_Gradq(2:3,:); % Nur 2 Komponenten: 2(Y) und 3(X)
    elseif all(s.Leg_I_EE_Task(iLeg,4:6) == [0 1 1]) % 3T1R-PKM ohne Aufg.-Red.
      K2 = 2;
      % Neu-Berechnung des Rotationsteils der Zwangsbedingungen
      sign_alpha = sign(r2eul(R_Ex_Eq, phiconv_W_E_reci));
      sign_alpha(sign_alpha==0)=1;
      Phipq_red(K1:K2,J1:J2) = [Phi_phi_i_Gradq(1,:); ... % Z
              sign_alpha(2)*Phi_phi_i_Gradq(2,:) + ... % |Y|
              sign_alpha(3)*Phi_phi_i_Gradq(3,:)]; %     |X|
    elseif all(s.Leg_I_EE_Task(iLeg,4:6) == [0 1 0]) % 3T1R-PKM mit Aufg.-Red.
      K2 = 1;
      sign_alpha = sign(r2eul(R_Ex_Eq, phiconv_W_E_reci));
      sign_alpha(sign_alpha==0)=1;
      Phipq_red(K1:K2,J1:J2) = sign_alpha(2)*Phi_phi_i_Gradq(2,:) + ... % |Y|
                               sign_alpha(3)*Phi_phi_i_Gradq(3,:);%       |X|
    elseif all(s.Leg_I_EE_Task(iLeg,4:6) == [0 0 0]) % 2T1R mit Aufg.-Red
      % ebene Rotation (redundanter Fall). Keinen Eintrag für Führungskette
      K2 = 0;
    elseif all(s.Leg_I_EE_Task(iLeg,4:6) == [0 0 1]) % 2T1R ohne Aufg.-Red
      % ebene Rotation (nicht-redundanter Fall).
      K2 = 1;
      Phipq_red(K1:K2,J1:J2) = Phi_phi_i_Gradq(1,:); % nur 1. Eintrag (Z)
    elseif all(s.Leg_I_EE_Task(iLeg,4:6) == [1 1 1]) % allgemeiner Fall (3T3R-PKM, aber auch 3T0R-PKM mit 3T3R-ZB der Beine)
      K2 = 3;
      Phipq_red(K1:K2,J1:J2) = Phi_phi_i_Gradq; % alle drei Einträge
    else
      % Nicht vorgesehener Fall
      K2 = K1+sum(s.Leg_I_EE_Task(iLeg,4:6))-1; % für Kompilierbarkeit
    end
    K1 = K2+1;
  elseif iLeg > 1 % ZB für Folgekette
    R_0_E_q_f = R_0_0i * T_0i_Bi(1:3,1:3) * R_Bi_P * R_P_E; 
    % Argument erste Zeile von [2_SchapplerTapOrt2019a]/(38); Gl. D.18, D.21 
    R_Lq_Eq_f = R_0_L_q_L' * R_0_E_q_f;

    %% (III) Ableitung Rotationsmatrix nach Gelenkwinkeln
    % Ableitung der EE-Rotation der Folge-Kette nach den Gelenkwinkeln der
    % Folge-Kette (Term III in [2_SchapplerTapOrt2019a]/(38); D.22)
    dRb_0E_dq_f = dRb_0E_dq;
    % Das gleiche für die Führungskette
    % (Term III in [2_SchapplerTapOrt2019a]/(39); D.24)
    dRb_0L_dq_L = dRb_0L_dq;

    %% (II) Ableitung des Matrix-Produktes
    % Term II aus Gl. [2_SchapplerTapOrt2019a]/(39); (D.24)
    % Die Matrix R_0_E_x wird transponiert eingesetzt.
    % aus rmatvecprod_diff_rmatvec2_matlab.m
    a11=R_0_E_q_f(1,1);a12=R_0_E_q_f(2,1);a13=R_0_E_q_f(3,1);
    a21=R_0_E_q_f(1,2);a22=R_0_E_q_f(2,2);a23=R_0_E_q_f(3,2);
    a31=R_0_E_q_f(1,3);a32=R_0_E_q_f(2,3);a33=R_0_E_q_f(3,3);
    dPidRb2f = [a11 a12 a13 0 0 0 0 0 0; a21 a22 a23 0 0 0 0 0 0; a31 a32 a33 0 0 0 0 0 0; 0 0 0 a11 a12 a13 0 0 0; 0 0 0 a21 a22 a23 0 0 0; 0 0 0 a31 a32 a33 0 0 0; 0 0 0 0 0 0 a11 a12 a13; 0 0 0 0 0 0 a21 a22 a23; 0 0 0 0 0 0 a31 a32 a33;];

    % Term II aus Gl. [2_SchapplerTapOrt2019a]/(38); (D.22)
    a11=R_0_L_q_L(1,1);a12=R_0_L_q_L(2,1);a13=R_0_L_q_L(3,1);
    a21=R_0_L_q_L(1,2);a22=R_0_L_q_L(2,2);a23=R_0_L_q_L(3,2);
    a31=R_0_L_q_L(1,3);a32=R_0_L_q_L(2,3);a33=R_0_L_q_L(3,3);
    dPidRb2L = [a11 a12 a13 0 0 0 0 0 0; a21 a22 a23 0 0 0 0 0 0; a31 a32 a33 0 0 0 0 0 0; 0 0 0 a11 a12 a13 0 0 0; 0 0 0 a21 a22 a23 0 0 0; 0 0 0 a31 a32 a33 0 0 0; 0 0 0 0 0 0 a11 a12 a13; 0 0 0 0 0 0 a21 a22 a23; 0 0 0 0 0 0 a31 a32 a33;];

    %% (I) Ableitung der Euler-Winkel nach der Rot.-matrix
    % Term I aus Gl. [2_SchapplerTapOrt2019a]/(38); (D.22): 
    % Term I aus Gl. (C.49): 
    % (ZYX-Euler-Winkel des Orientierungsfehlers)
    % Aus eulzyx_diff_rmatvec_matlab.m
    % Unabhängig vom Roboter (nur von Orientierungsdarstellung)
    dphidRbf = eul_diff_rotmat(R_Lq_Eq_f, phiconv_W_E_reci);
    % Term I aus Gl. [2_SchapplerTapOrt2019a]/(39); (D.24)
    dphidRbL = eul_diff_rotmat(R_Lq_Eq_f, phiconv_W_E_reci);

    % Term II in [2_SchapplerTapOrt2019a]/(39)
    P_T = [1 0 0 0 0 0 0 0 0; 0 0 0 1 0 0 0 0 0; 0 0 0 0 0 0 1 0 0; 0 1 0 0 0 0 0 0 0; 0 0 0 0 1 0 0 0 0; 0 0 0 0 0 0 0 1 0; 0 0 1 0 0 0 0 0 0; 0 0 0 0 0 1 0 0 0; 0 0 0 0 0 0 0 0 1;];

    %% Gesamtergebnisse (für Folgekette)
    % [2_SchapplerTapOrt2019a]/(39); Gl. (D.24);
    % Ableitung nach Gelenkwinkeln der Führungskette
    Phi_phi_i_Gradq_L = dphidRbL * P_T*dPidRb2f * dRb_0L_dq_L;
    
    % [2_SchapplerTapOrt2019a]/(38); Gl. (D.22); 
    % Ableitung nach Gelenkwinkeln der Folgekette
    Phi_phi_i_Gradq_f = dphidRbf * dPidRb2L * dRb_0E_dq_f; 

    % In Endergebnis einsetzen
    I1 = 1+3*(iLeg-1); % I: Zeilen der Ergebnisvariable: Alle rotatorischen ZB
    I2 = I1+2; % drei rotatorische Einträge
    G1 = 1; % G: Spalten der Ergebnisvariable (Führungskette ist Nr. 1)
    G2 = I2J_LEG(1); % So viele Spalten wie Gelenke in Führungskette
    % Ableitung nach den Gelenkwinkeln der Führungskette
    Phipq(I1:I2,G1:G2) = Phi_phi_i_Gradq_L; 
    J1 = I1J_LEG(iLeg); % J: Spalten der Ergebnisvariable: Alle Gelenke
    J2 = I2J_LEG(iLeg); % so viele Einträge wie Beine in der Kette
    % Ableitung nach den Gelenkwinkeln der Folgekette
    Phipq(I1:I2,J1:J2) = Phi_phi_i_Gradq_f;

    if all(s.Leg_I_EE_Task(iLeg,4:6) == [1 1 1])
      K2 = K1 + 2;
      Phipq_red(K1:K2,G1:G2) = Phi_phi_i_Gradq_L; % alle 3 Einträge
      Phipq_red(K1:K2,J1:J2) = Phi_phi_i_Gradq_f;
    elseif all(s.Leg_I_EE_Task(iLeg,4:6) == [0 1 1]) % 3T1R-PKM
      K2 = K1 + 1;
      % Neu-Berechnung des Rotationsteils der Zwangsbedingungen
      sign_alpha = sign(r2eul(R_Lq_Eq_f, phiconv_W_E_reci));
      sign_alpha(sign_alpha==0)=1;
      % Residuum ist nun der Betrag von X- und Y-Komponente. Siehe constr3_rot.
      Phipq_red(K1:K2,G1:G2) = [Phi_phi_i_Gradq_L(1,:); ... % Z-Rotation
               sign_alpha(2)*Phi_phi_i_Gradq_L(2,:)+... % |Y|
               sign_alpha(3)*Phi_phi_i_Gradq_L(3,:)]; % |X|
      Phipq_red(K1:K2,J1:J2) = [Phi_phi_i_Gradq_f(1,:); ...
               sign_alpha(2)*Phi_phi_i_Gradq_f(2,:)+...
               sign_alpha(3)*Phi_phi_i_Gradq_f(3,:);];
    elseif all(s.Leg_I_EE_Task(iLeg,4:5) == [0 0]) % ebene Rotation
      % 2T1R oder 3T1R: Nehme nur die z-Komponente (reziprokes Residuum)
      K2 = K1;
      Phipq_red(K2,G1:G2) = Phi_phi_i_Gradq_L(1,:); % nur 1. Eintrag (Z)
      Phipq_red(K2,J1:J2) = Phi_phi_i_Gradq_f(1,:);
    else
      % Fall nicht vorgesehen. Folgendes geht nicht oben mit Kompilierung
      K2 = K1+sum(s.Leg_I_EE_Task(iLeg,4:6))-1;
    end
    K1 = K2+1;
  end
end
