% Ableitung der kinematischen Zwangsbedingungen nach den Gelenkwinkeln
% Bezeichnungen: 
% * Jacobi-Matrix der inversen Kinematik, 
% * geometrische Matrix der inversen Kinematik
% 
% Variante 2:
% * Absolute Rotation ausgedrückt in XYZ-Euler-Winkeln
% * Rotationsfehler ausgedrückt in ZYX-Euler-Winkeln (und als E(q)-E(x)
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phi_q_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_q [6xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
%
% Diese Datei ist identisch mit: ParRob/constr2grad_q.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_q_red, Phi_q] = %PN%_constr2grad_q(q, xE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(6,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs            'NLEG', 0,
%$cgargs              'NJ', 0,
%$cgargs         'I1J_LEG', zeros(%NLEG%,1),
%$cgargs         'I2J_LEG', zeros(%NLEG%,1),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', zeros(%NLEG%,1),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1))}

s_1 = struct(       'I_EE', s.I_EE,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
                   'T_P_E', s.T_P_E,...
               'r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
                 'Leg_NQJ', s.Leg_NQJ);
               
s_2 = struct(       'I_EE', s.I_EE,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
             'phi_P_B_all', s.phi_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);

% Indizes für Reduktion der Zwangsbedingungen bei 3T2R: Nur für
% symmetrische 3T2R-PKM
I_constr_red = 1:6*s.NLEG;
if s.NJ==25 % Workaround um symmetrische 3T2R-PKM zu erkennen.
  I_constr_red(4:6:end) = []; % entspricht z-Euler-Winkel
end
%% Aufruf der Unterfunktionen
% Die Unterfunktionen sind nach ZB-Art sortiert, in der Ausgabevariablen
% ist die Sortierung nach Beingruppen (ZB Bein 1, ZB Bein 2, ...)
[~, Phi_tq] = %PN%_constr2grad_tq(q, s_1);
[~, Phi_rq] = %PN%_constr2grad_rq(q, xE, s_2);

%% Initialisierung mit Fallunterscheidung für symbolische Eingabe
% Sortierung der ZB-Zeilen in den Matrizen nach Beingruppen, nicht nach ZB-Art
Phi_q =     NaN(6*s.NLEG, s.NJ);

%% Belegung der Ausgabe
% Entspricht [2_SchapplerTapOrt2019a]/(32)
for i = 1:s.NLEG
  Phi_q((i-1)*6+1:(i)*6, :) = ...
    [Phi_tq((i-1)*3+1:(i)*3, :); ...
     Phi_rq((i-1)*3+1:(i)*3, :)];
end
Phi_q_red = Phi_q(I_constr_red, :);
