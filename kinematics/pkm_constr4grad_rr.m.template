% Ableitung der Rotationskomponente der kinematischen ZB nach der EE-Orientierung
% 
% Variante 4:
% * Bezogen auf Winkelgeschwindigkeit des Koppelpunktes Bi
%   (effektiv werden die Geschw.-ZB nach den Gelenk-Geschw. abgeleitet)
% 
% Eingabe:
% xE [6x1]
%   Endeffektorpose des Roboters bez체glich des Basis-KS
% 
% Ausgabe:
% Phi_rr_red
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_rr [3xN]
%   Ableitung der kinematischen Zwangsbedingungen nach der EE-Orientierung
%   Rotatorischer Teil
% 
% Diese Datei ist identisch mit: ParRob/constr4grad_rr.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Quelle:
% [A] Aufzeichnungen Schappler vom 13.02.2020

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2020-02
% (C) Institut f체r Mechatronische Systeme, Universit채t Hannover

function [Phi_rr_red, Phi_rr] = %PN%_constr4grad_rr(xE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(6,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6))}

NLEG = %NLEG%;

Phi_rr = zeros(3*NLEG,3);
Phi_rr_red = zeros(length(s.I_constr_r_red), sum(s.I_EE(4:6)));

phi = xE(4:6); % Euler-Winkel
Jw = euljac(phi, s.phiconv_W_E); % Euler-Jacobi-Matrix f체r EE-Orientierung
%% Belegung der Ausgabevariablen
% Plattform-Koppelpunkt-Jacobi
K1 = 1;
for i = 1:NLEG
  I1 = 3*(i-1)+1;
  % [A], Gl. 11
  phi = -Jw; % Term entspricht direkt dem Vorfaktor der Winkelgeschwindigkeit
  Phi_rr(I1:I1+2,:) = phi;
  K2 = K1+sum(s.Leg_I_EE_Task(i,4:6))-1;
  Phi_rr_red(K1:K2,:) = phi(s.Leg_I_EE_Task(i,4:6), s.I_EE(4:6));
  K1 = K2+1;
end
