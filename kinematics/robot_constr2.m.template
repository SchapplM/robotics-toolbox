% Kinematische Zwangsbedingungen zwischen Ist- und Soll-Konfiguration
% Die Zwangsbedingungen geben die Abweichung zwischen einer Soll-Pose in
% EE-Koordinaten und der Ist-Pose aus gegebenen Gelenk-Koordinaten an.
% Vollständige Rotations- und Translationskomponenten
% Variante 2:
% * Vektor vom Basis- zum EE-KS (kein Unterschied zu SKM-Variante 1)
% * Absolute Rotation ausgedrückt in XYZ-Euler-Winkeln (entspricht PKM
%   Variante 2)
% * Rotationsfehler ausgedrückt in Euler-Winkeln (um raumfeste Achsen), je
%   nach Eingabeargument `reci` (entspricht teilweise PKM-Variante 2)
%
% Eingabe:
% q
%   Gelenkwinkel des Roboters
% Tr0E [3x4]
%   Endeffektorpose des Roboters bezüglich des Basis-KS.
%   Homogene Transformationsmatrix ohne letzte Zeile.
% pkin
%   Kinematik-Parameter
% T_N_E
%   Transformationsmatrix EE-Segment-KS -> EE-KS
% phiconv_W_E
%   Winkelkonvention der Euler-Winkel Welt->End-Effektor. Siehe eul2r.m
% I_EElink
%   Nummer des Segmentes, an dem der EE befestigt ist (0=Basis)
% reci
%   true: Nehme reziproke Euler-Winkel für Orientierungsfehler (z.B.
%   ZYX-Orientierungsfehler für XYZ-Absolutorientierung)
%   false: Gleiche Euler-Winkel für Fehler und Absolut [Standard]
%
% Ausgabe:
% Phi
%   Kinematische Zwangsbedingungen des Roboters: Maß für den Positions- und
%   Orientierungsfehler zwischen Ist-Pose aus gegebenen Gelenkwinkeln q und
%   Soll-Pose aus gegebenen EE-Koordinaten x
% Tc_stack [(%NJ%+1+1)*3 x 4]
%   Gestapelte homogene Transformationsmatrizen für q (jew. ohne 0001-Zeile)
%   Enthält zusätzlich eine Zeile für den EE.

% Quelle:
% [SchapplerTapOrt2019] Schappler, M. et al.: Resolution of Functional
% Redundancy for 3T2R Robot Tasks using Two Sets of Reciprocal Euler
% Angles, Proc. of the 15th IFToMM World Congress, 2019

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2019-02
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi, Tc_stack] = %RN%_constr2(q, Tr0E, pkin, T_N_E, phiconv_W_E, I_EElink, reci)

%% Init
%#codegen
%$cgargs {zeros(%NQJ%,1),zeros(3,4),zeros(%NKP%,1),zeros(4,4),uint8(2),uint8(0),true}

%% Allgemein
Tc_stack = NaN(3*(%NL%+1),4);

if nargout == 1 % einfacher Aufruf (schneller)
  T_0_N_q = %RN%_fkine_fixb_body_rotmat_mdh_sym_varpar(q, I_EElink, pkin);
  T_0_E_q = T_0_N_q * T_N_E;
else
  [Tc_ges, Tc_stack(1:end-3,:)] = %RN%_fkine_fixb_rotmat_mdh_sym_varpar(q, pkin);
  T_0_E_q = Tc_ges(:,:,I_EElink+1) * T_N_E;
  Tc_stack(end-2:end,:) = T_0_E_q(1:3,:);
end

%% Translatorischer Teil
r_0_E_x = Tr0E(1:3,4); % [SchapplerTapOrt2019, Gl. (3)

% Direkte Kinematik der Beinkette
r_0_E_q = T_0_E_q(1:3,4); % [SchapplerTapOrt2019, Gl. (1)

% [SchapplerTapOrt2019, Gl. (8)
Phix = r_0_E_q - r_0_E_x;

%% Rotatorischer Teil
R_0_E_x = Tr0E(1:3,1:3); % [SchapplerTapOrt2019, Gl. (4)
if reci
  % Wahl reziproker Winkel, siehe [SchapplerTapOrt2019, Fig. 1
  [~,phiconv_delta] = euler_angle_properties(phiconv_W_E);
else
  phiconv_delta = phiconv_W_E;
end

R_0_E_q = T_0_E_q(1:3,1:3);

% Differenz-Rotation z.B. mit ZYX-Euler-Winkel
% [SchapplerTapOrt2019], Gl. (9)
R_Ex_Eq = R_0_E_x' * R_0_E_q;
phiR = r2eul(R_Ex_Eq, phiconv_delta);

% [SchapplerTapOrt2019, Gl. (7)
Phi = [Phix; phiR];
