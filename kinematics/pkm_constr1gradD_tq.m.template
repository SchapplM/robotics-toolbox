% Ableitung der Translationskomponente der kinematischen ZB nach den
% Gelenkwinkeln und Ableitung dieser (Gradienten-)Matrix nach der Zeit
% 
% Variante 1:
% * Translation ausgedr체ckt als Vektor vom Basis-Koppelpunkt A zum
%   Plattform-Koppelpunkt B
% * Translationsfehler ist Differenz zwischen Vektor berechnet aus x und q
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% qD [Nx1]
%   Geschwindigkeit aller Gelenkwinkel aller serieller Beinketten der PKM
% s [struct]
%   Struktur mit Eigenschaften des Roboters
% 
% Ausgabe:
% PhiD_q_legs_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   und der Zeit; translatorischer Teil
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% PhiD_q_legs [3xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
% 
% Diese Datei ist identisch mit: ParRob/constr1gradD_tq.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut f체r Mechatronische Systeme, Universit채t Hannover

function [PhiD_q_legs_red, PhiD_q_legs] = %PN%_constr1gradD_tq(q, qD, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(%NJ%,1), struct(
%$cgargs  'I_constr_t_red', coder.newtype('double',[1,inf]),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung
NLEG = %NLEG%;
I_EE = %I_EE%;
NJ = %NJ%;
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
Leg_I_EElink = %Leg_I_EElink%;
Leg_NQJ = %Leg_NQJ%;

%% Initialisierung mit Fallunterscheidung f체r symbolische Eingabe
PhiD_q_legs = NaN(3*NLEG,NJ);
PhiD_q_legs_red = NaN(length(s.I_constr_t_red),NJ);


%% Berechnung
% Berechnung aus dem translatorischen Teil der Jacobi-Matrix der seriellen
% Beinketten. Davon muss lediglich die Zeitableitung gebildet werden.
for i = 1:NLEG
  IJ_i = I1J_LEG(i):I2J_LEG(i);
  q_i = q(IJ_i); % Gelenkwinkel dieser Kette
  qD_i = qD(IJ_i); % Gelenkgeschw. dieser Kette
  
  phi_0_Ai = s.Leg_phi_W_0(:,i);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(i));

  r_N_E = s.Leg_T_N_E_vec(4:6,i);
  JD0i_i_trans = %SN%_jacobiaD_transl_sym_varpar(q_i, qD_i,Leg_I_EElink(i), r_N_E, s.Leg_pkin_gen(i,:)'); % Zeitableitung der Jacobi
  JD0_i_trans = R_0_0i*JD0i_i_trans; % Bezug auf das Basis-KS der PKM
  JD_Ai_Bi = JD0_i_trans; % Nur xyz-Koordinate in ZB.
  
  dPhidqJi = zeros(3*NLEG,Leg_NQJ(i));
  dPhidqJi_red = zeros(sum(I_EE(1:3))*NLEG,Leg_NQJ(i));

  
  % Kein negatives Vorzeichen, siehe Definition der Zwangsbedingungen
  dPhidqJi(3*(i-1)+1:3*(i),:) = JD_Ai_Bi;
  PhiD_q_legs(:,IJ_i) = dPhidqJi;
  
  % Eintragen in Ergebnis-Variable
  I1 = sum(I_EE(1:3))*(i-1)+1;
  I2 = I1+sum(I_EE(1:3))-1;
  if ~isempty(PhiD_q_legs_red)
    dPhidqJi_red(I1:I2,:) = JD_Ai_Bi(s.Leg_I_EE_Task(i,1:3),:);
    PhiD_q_legs_red(:,IJ_i) = dPhidqJi_red;
  end
end
