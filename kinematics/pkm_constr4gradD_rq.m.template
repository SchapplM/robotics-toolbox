% Ableitung der Rotationskomponente der kinematischen ZB nach den Gelenkwinkeln
% 
% Variante 4:
% * Bezogen auf Winkelgeschwindigkeit des Koppelpunktes Bi
%   (effektiv werden die Geschw.-ZB nach den Gelenk-Geschw. abgeleitet)
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% 
% Ausgabe:
% Phi_q_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Translatorischer Teil
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_q [3xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
% 
% Diese Datei ist identisch mit: ParRob/constr4gradD_rq.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Quellen:
% [A] Aufzeichnungen Schappler vom 13.02.2020

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2020-02
% (C) Institut f체r Mechatronische Systeme, Universit채t Hannover

function [Phi_q_red, Phi_q] = %PN%_constr4gradD_rq(q, qD, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(%NJ%,1), struct(
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung
NLEG = %NLEG%;
NJ = %NJ%;
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
Leg_I_EElink = %Leg_I_EElink%;

%% Initialisierung mit Fallunterscheidung f체r symbolische Eingabe

Phi_q = zeros(3*NLEG,NJ);
Phi_q_red = zeros(length(s.I_constr_r_red),NJ);

%% Berechnung
% Berechnung aus dem rotatorischen Teil der Jacobi-Matrix der seriellen
% Beinketten
K1 = 1;
for i = 1:NLEG
  IJ_i = I1J_LEG(i):I2J_LEG(i);
  qs = q(IJ_i); % Gelenkwinkel dieser Kette
  qsD = qD(IJ_i); 
  
  phi_0_Ai = s.Leg_phi_W_0(:,i);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(i));
  % Geometrische Jacobi-Matrix (Rotations-Teil)
  JD0i_i_rotg = %SN%_jacobigD_rot_sym_varpar(qs, qsD, Leg_I_EElink(i), s.Leg_pkin_gen(i,:)');
  JD_Ai_Bi = R_0_0i*JD0i_i_rotg; % Bezug auf das Basis-KS der PKM

  %% In Endergebnis einsetzen
  I1 = 1+3*(i-1); % I: Zeilen der Ergebnisvariable: Alle rotatorischen ZB
  I2 = I1+2; % drei rotatorische Eintr채ge
  % Gl. A.10
  Phi_q(I1:I2,IJ_i) = JD_Ai_Bi;
  
  % Eintragen in Ergebnis-Variable
  if ~isempty(Phi_q_red)
    K2 = K1+sum(s.Leg_I_EE_Task(i,4:6))-1;
    Phi_q_red(K1:K2,IJ_i) = JD_Ai_Bi(s.Leg_I_EE_Task(i,4:6),:);
    K1 = K2+1;
  end
end
