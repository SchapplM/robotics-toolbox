% Inverse Kinematik für allgemeinen Roboter (Komplette Trajektorie)
% Allgemeine, stark parametrierbare Funktion zum Aufruf mit allen möglichen
% Einstellungen
% Iterative Lösung der inversen Kinematik mit inverser Jacobi-Matrix
% Zusätzlich Nutzung der differentiellen Kinematik für schnellere Konvergenz
% 
% Eingabe:
% XE
%   Trajektorie von EE-Lagen (Sollwerte)
% XDE
%   Trajektorie von EE-Geschwindigkeiten (Sollwerte)
%   (Die Orientierung wird durch Euler-Winkel-Zeitableitung dargestellt)
% XDDE
%   Trajektorie von EE-Beschleunigungen (Sollwerte)
%   Orientierung bezogen auf Euler-Winkel
% T
%   Zeitbasis der Trajektorie (Alle Zeit-Stützstellen)
% q0
%   Anfangs-Gelenkwinkel für Algorithmus
% s
%   Struktur mit Eingabedaten. Felder, siehe Quelltext.
% 
% Ausgabe:
% Q
%   Trajektorie von Gelenkpositionen (Lösung der IK)
% QD
%   Trajektorie von Gelenkgeschwindigkeiten
% QDD
%   Trajektorie von Gelenkbeschleunigungen
% Jinv_ges
%   Inverse PKM-Jacobi-Matrix für alle Bahnpunkte (spaltenweise in Zeile)
%   (Jacobi zwischen allen Gelenkgeschwindigkeiten qD und EE-geschwindigkeit xDE)
%   (Nicht: Nur Bezug zu Antriebsgeschwindigkeiten qaD)
% JinvD_ges
%   Zeitableitung von Jinv_ges
% JointPos_all
%   gestapelte Positionen aller Gelenke der PKM für alle Zeitschritte
%   (Entspricht letzter Spalte aller Transformationsmatrizen aus fkine_legs)

% Diese Datei ist identisch mit: ParRob/invkin_traj.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Quelle:
% [2] Aufzeichnungen Schappler vom 11.12.2018

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2019-02
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Q, QD, QDD, Phi, Jinv_ges, JinvD_ges, JointPos_all] = %PN%_invkin_traj(X, XD, XDD, T, q0, s, s_ser)

%% Coder Information
%#codegen
%$cgargs {coder.newtype('double',[inf,6]),coder.newtype('double',[inf,6]),
%$cgargs  coder.newtype('double',[inf,6]),coder.newtype('double',[inf,1]),
%$cgargs  zeros(%NJ%,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs       'I_EE_Task', true(1,6),
%$cgargs      'maxstep_ns', 0,
%$cgargs   'maxrelstep_ns', 0.005,
%$cgargs           'sigma', zeros(%NJ%,1),
%$cgargs    'simplify_acc', false,
%$cgargs         'mode_IK', 2,
%$cgargs           'debug', false,
%$cgargs              'wn', zeros(4,1),
%$cgargs  'I_constr_t_red', coder.newtype('double',[1,inf]),
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs    'I1constr_red', zeros(1,%NLEG%),
%$cgargs    'I2constr_red', zeros(1,%NLEG%),
%$cgargs      'I_constr_t', coder.newtype('double',[1,inf]),
%$cgargs      'I_constr_r', coder.newtype('double',[1,inf]),
%$cgargs    'I_constr_red', coder.newtype('double',[1,inf]),
%$cgargs            'I_qa', logical(zeros(%NJ%,1)),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs            'NLEG', 0,
%$cgargs              'NJ', 0,
%$cgargs              'NL', 0,
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs         'I1J_LEG', zeros(%NLEG%,1),
%$cgargs         'I2J_LEG', zeros(%NLEG%,1),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', uint8(zeros(%NLEG%,1)),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1),
%$cgargs      'Leg_sigmaJ', zeros(%NQJ%,%NLEG%),
%$cgargs        'Leg_qlim', zeros(6,2*%NLEG%),
%$cgargs        'Leg_qDlim', zeros(6,2*%NLEG%),
%$cgargs  'Leg_phiconv_W_E', uint8(zeros(%NLEG%,1))),struct(
%$cgargs            'reci', true,
%$cgargs               'K', zeros(%NQJ%,1),
%$cgargs              'Kn', zeros(%NQJ%,1),
%$cgargs              'wn', zeros(2,1),
%$cgargs       'scale_lim', 0,
%$cgargs      'maxrelstep', 0.1,
%$cgargs       'normalize', false,
%$cgargs           'n_min', 0,
%$cgargs           'n_max', 1000,
%$cgargs        'rng_seed', 0,
%$cgargs        'Phit_tol', 1.0000e-10,
%$cgargs        'Phir_tol', 1.0000e-10,
%$cgargs     'retry_limit', 100)}
coder.extrinsic('tic');
coder.extrinsic('toc');
coder.extrinsic('fprintf');
coder.extrinsic('warning');
%% Initialisierung

I_EE = s.I_EE_Task;
mode_IK = s.mode_IK;
debug = s.debug;
wn = s.wn;
s_ser.wn = zeros(2,1); % Nullraumopt. nicht in IK-Berechnung

dof_3T2R = false;
if all(I_EE == logical([1 1 1 1 1 0]))
  dof_3T2R = true;
  I_EE = s.I_EE;
end

if nargout == 6
  % Wenn Jacobi-Zeitableitung als Ausgabe gefordert ist, kann die
  % vollständige Formel für die Beschleunigung benutzt werden
  simplify_acc = false;
else
  % Benutze vollständige Formel entsprechend Einstellungsparameter
  simplify_acc = s.simplify_acc;
end

qlim = NaN(s.NJ,2);
qDlim = NaN(s.NJ,2);

J1 = 1;
for i = 1:s.NLEG
  J2 = J1+s.Leg_NQJ(i)-1;
  qlim(J1:J2,:) = s.Leg_qlim(1:s.Leg_NQJ(i),(1+2*(i-1)):(2+2*(i-1)));
  qDlim(J1:J2,:) = s.Leg_qDlim(1:s.Leg_NQJ(i),(1+2*(i-1)):(2+2*(i-1)));
  J1 = J2+1;
end
if ~all(isnan(qDlim(:)))
  limits_qD_set = true;
  qDmin = qDlim(:,1);
  qDmax = qDlim(:,2);
else
  limits_qD_set = false;
  qDmin = -inf(s.NJ,1);
  qDmax =  inf(s.NJ,1);
end

if any(wn ~= 0)
  nsoptim = true;
else
  % Keine zusätzlichen Optimierungskriterien
  nsoptim = false;
end
if ~dof_3T2R
  % TODO: Hier noch echte Prüfung der FG des Roboters oder detailliertere
  % Fallunterscheidungen notwendig.
  nsoptim = false;
  % Deaktiviere limits_qD_set, wenn es keinen Nullraum gibt
  limits_qD_set = false;
end

% Altwerte für die Bildung des Differenzenquotienten initialisieren
if dof_3T2R && s.NJ==25
  J_x_inv_alt = zeros(s.NJ,6);
else
  J_x_inv_alt = zeros(s.NJ,sum(s.I_EE));
end
Phi_q_alt = zeros(length(s.I_constr_t_red)+length(s.I_constr_r_red), s.NJ);
Phi_x_alt = zeros(length(s.I_constr_t_red)+length(s.I_constr_r_red), sum(I_EE));
N = eye(s.NJ);
Phi_xD = Phi_x_alt;
% Eingabestruktur für tpl-fcns
% Struktur für %PN%_invkin
s_par = struct('r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
                    'NLEG', s.NLEG,...
                      'NL', s.NL,...
             'phiconv_W_E', s.phiconv_W_E,...
            'I1constr_red', s.I1constr_red,...
            'I2constr_red', s.I2constr_red,...
                   'T_P_E', s.T_P_E,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
               'I_EE_Task', s.I_EE_Task,...
                 'Leg_NQJ', s.Leg_NQJ,...
              'Leg_sigmaJ', s.Leg_sigmaJ,...
                'Leg_qlim', s.Leg_qlim,...
         'Leg_phiconv_W_E', s.Leg_phiconv_W_E);
% Struktur für %PN%_constr4grad_q
s_q = struct(     'I_EE', s.I_EE,...
          'I_constr_t_red', s.I_constr_t_red,...
          'I_constr_r_red', s.I_constr_r_red,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
            'I_constr_t', s.I_constr_t,...
            'I_constr_r', s.I_constr_r,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
                 'Leg_NQJ', s.Leg_NQJ);
 % Struktur für %PN%_constr4grad_x
 s_x = struct(     'I_EE', s.I_EE,...
          'I_constr_t_red', s.I_constr_t_red,...
          'I_constr_r_red', s.I_constr_r_red,...
              'I_constr_t', s.I_constr_t,...
              'I_constr_r', s.I_constr_r,...
                    'NLEG', s.NLEG,...
               'r_P_B_all', s.r_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task);
% Struktur für %PN%_invkin3_tpl

K_tpl = repmat(s_ser.K,s.NLEG,1);
Kn_tpl = repmat(s_ser.Kn,s.NLEG,1);

s_tpl = struct( 'I_EE', s.I_EE,...
       'I_EE_Task', s.I_EE_Task,...
           'sigma', s.sigma,...
               'K', K_tpl,...
              'Kn', Kn_tpl,...
              'wn', zeros(2,1),...
      'maxstep_ns', s.maxstep_ns,...
       'normalize', s_ser.normalize,...
           'n_min', s_ser.n_min,...
           'n_max', s_ser.n_max,...
       'scale_lim', s_ser.scale_lim,...
        'Phit_tol', s_ser.Phit_tol,...
        'Phir_tol', s_ser.Phir_tol,...
      'maxrelstep', s_ser.maxrelstep,...
   'maxrelstep_ns', s.maxrelstep_ns,...
     'retry_limit', s_ser.retry_limit,...
            'NLEG', s.NLEG,...
              'NJ', s.NJ,...
              'NL', s.NL,...
         'I1J_LEG', s.I1J_LEG,...
         'I2J_LEG', s.I2J_LEG,...
  'I_constr_t_red', s.I_constr_t_red,...
  'I_constr_r_red', s.I_constr_r_red,...
    'I_constr_red', s.I_constr_red,...
       'r_P_B_all', s.r_P_B_all,...
     'phi_P_B_all', s.phi_P_B_all,...
     'phiconv_W_E', s.phiconv_W_E,...
           'T_P_E', s.T_P_E,...
   'Leg_I_EE_Task', s.Leg_I_EE_Task,...
    'Leg_pkin_gen', s.Leg_pkin_gen,...
   'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
   'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
    'Leg_I_EElink', s.Leg_I_EElink,...
     'Leg_phi_W_0', s.Leg_phi_W_0,...
 'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
         'Leg_NQJ', s.Leg_NQJ,...
        'Leg_qlim', s.Leg_qlim);
% Struktur für %PN%_constr3grad_q
s_3q = struct(      'I_EE', s.I_EE,...
               'I_EE_Task', s.I_EE_Task,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
               'r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
                 'Leg_NQJ', s.Leg_NQJ);
% Struktur für %PN%_constr3grad_x
s_3x = struct(      'I_EE', s.I_EE,...
                    'NLEG', s.NLEG,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
             'phi_P_B_all', s.phi_P_B_all,...
                   'T_P_E', s.T_P_E,...
             'phiconv_W_E', s.phiconv_W_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Struktur für %PN%_constr2grad_q
s_2q = struct(      'I_EE', s.I_EE,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
               'r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task, ...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
                 'Leg_NQJ', s.Leg_NQJ);
% Struktur für %PN%_constr2grad_x
s_2x = struct(      'I_EE', s.I_EE,...
               'I_EE_Task', s.I_EE_Task,...
                    'NLEG', s.NLEG,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
             'phi_P_B_all', s.phi_P_B_all,...
                   'T_P_E', s.T_P_E,...
             'phiconv_W_E', s.phiconv_W_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Struktur für %PN%_constr3gradD_q
s_3qd = struct(      'I_EE', s.I_EE,...
               'I_EE_Task', s.I_EE_Task,...
          'I_constr_t_red', s.I_constr_t_red,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
             'phi_P_B_all', s.phi_P_B_all,...
             'r_P_B_all', s.r_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
                 'Leg_NQJ', s.Leg_NQJ);
% Struktur für %PN%_constr3gradD_x
s_3xd = struct(      'I_EE', s.I_EE,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
          'I_constr_t_red', s.I_constr_t_red,...
             'phi_P_B_all', s.phi_P_B_all,...
                   'T_P_E', s.T_P_E,...
             'phiconv_W_E', s.phiconv_W_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Struktur für %PN%_constr2gradD_q
s_2qd = struct(      'I_EE', s.I_EE,...
               'I_EE_Task', s.I_EE_Task,...
          'I_constr_t_red', s.I_constr_t_red,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
             'phi_P_B_all', s.phi_P_B_all,...
             'r_P_B_all', s.r_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
                 'Leg_NQJ', s.Leg_NQJ);
% Struktur für %PN%_constr2gradD_x
s_2xd = struct(      'I_EE', s.I_EE,...
                'I_EE_Task', s.I_EE_Task,...
                    'NLEG', s.NLEG,...
                      'NJ', s.NJ,...
                 'I1J_LEG', s.I1J_LEG,...
                 'I2J_LEG', s.I2J_LEG,...
          'I_constr_t_red', s.I_constr_t_red,...
             'phi_P_B_all', s.phi_P_B_all,...
                   'T_P_E', s.T_P_E,...
             'phiconv_W_E', s.phiconv_W_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
            'Leg_I_EElink', s.Leg_I_EElink,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Prüfe Felder der Einstellungs-Struktur und setze Standard-Werte, falls
% Eingabe nicht gesetzt



nt = length(T);
Q = NaN(nt, s.NJ);
QD = Q;
QDD = Q;
Phi = NaN(nt, length(s.I_constr_t_red)+length(s.I_constr_r_red));
if dof_3T2R && s.NJ==25
  Jinv_ges = NaN(nt, 6* s.NJ);
  JinvD_ges = zeros(nt, 6* s.NJ);
else
  Jinv_ges = NaN(nt, sum(I_EE)* s.NJ);
  JinvD_ges = zeros(nt, sum(I_EE)* s.NJ);
end
JointPos_all = NaN(nt, (1+s.NL-2+s.NLEG)*3);
qk0 = q0;
qDk0 = zeros(s.NJ,1);
Phi_q_voll = [];
Phi_x_voll = [];
dt = T(2)-T(1); % Init. fuer tpl

for k = 1:nt
  tic();
  x_k = X(k,:)';
  xD_k = XD(k,:)';
  xDD_k = XDD(k,:)';
  if k < nt % Schrittweite für letzten Zeitschritt angenommen wie vorletzter
    dt = T(k+1)-T(k); % Zeit bis zum nächsten Abtastpunkt
  end

  if mode_IK == 2
    % 3T2R-Funktion
    [q_k, Phi_k, Tc_stack_k] = %PN%_invkin3(x_k, qk0, s_tpl);
  else
    % Aufruf der Einzel-Beinketten-Funktion (etwas schneller, falls mit mex)
    [q_k, Phi_k, Tc_stack_k] = %PN%_invkin(x_k, qk0, s_par, s_ser);
  end
  % Abspeichern für Ausgabe.
  Q(k,:) = q_k;
  Phi(k,:) = Phi_k;
  JointPos_all(k,:) = Tc_stack_k(:,4);
  % Prüfe Erfolg der IK
  if any(abs(Phi_k(s.I_constr_t_red)) > s_ser.Phit_tol) || ...
     any(abs(Phi_k(s.I_constr_r_red)) > s_ser.Phir_tol)
    break; % Die IK kann nicht gelöst werden. Weitere Rechnung ergibt keinen Sinn.
  end
  % Gelenk-Geschwindigkeit berechnen
  if ~dof_3T2R
    % Benutze die Ableitung der Geschwindigkeits-Zwangsbedingungen
    % (effizienter als Euler-Winkel-Zwangsbedingungen)
    Phi_q = %PN%_constr4grad_q(q_k,s_q);
    Phi_x = %PN%_constr4grad_x(x_k,s_x);
    J_x_inv = -Phi_q \ Phi_x;
  else
    % Nehme vollständige ZB-Gradienten (2. Ausgabe) und wähle Komponenten
    % hier aus. Reduzierte ZB sind noch nicht vollständig implementiert für
    % Systeme mit Beinketten mit fünf Gelenken.
    if (length(q_k) == 25)% fuer symmetrische 3T2R-PKM
      [Phi_q,Phi_q_voll] = %PN%_constr2grad_q(q_k, x_k, s_2q);
      [~,Phi_x_voll] = %PN%_constr2grad_x(q_k, x_k, s_2x);
    else 
      [Phi_q,Phi_q_voll] = %PN%_constr3grad_q(q_k, x_k, s_3q);
      [~,Phi_x_voll] = %PN%_constr3grad_x(q_k, x_k, s_3x);
    end
    I = s.I_constr_red;
    Phi_x=Phi_x_voll(I,I_EE);
    J_x_inv = -Phi_q_voll \ Phi_x_voll;
  end
  if ~(nsoptim || limits_qD_set)
    if ~dof_3T2R
      qD_k = J_x_inv * xD_k(I_EE);
    else
      % Bei Aufgabenredundanz ist J_x_inv anders definiert
      qD_k = - Phi_q \ Phi_x * xD_k(I_EE);
    end
  else % Nullraum Optimierung
    % Korrekturterm für Linearisierungsfehler. Für PhiD_pre=0 entsteht die
    % normale inverse differentielle Kinematik. Mit dem Korrekturterm
    % bleibt die Geschwindigkeit konsistent zur Nullraumbewegung aus der
    % Beschleunigung
    PhiD_pre = Phi_q*qDk0;
    PhiD_korr = -PhiD_pre - Phi_x*xD_k(I_EE);
    qD_korr = Phi_q\PhiD_korr;
    qD_k = qDk0 + qD_korr;
    if debug % Erneuter Test
      PhiD_test = Phi_x*xD_k(I_EE) + Phi_q*qD_k;
      if any(abs(PhiD_test) > 1e-10)
        error('Korrektur der Geschwindigkeit hat nicht funktioniert');
      end
    end
  end
  %% Gelenk-Beschleunigung berechnen
  if simplify_acc
    if k > 1
      % linksseitiger Differenzenquotient
      JD_x_inv = (J_x_inv-J_x_inv_alt)/(T(k)-T(k-1));
      Phi_qD = (Phi_q - Phi_q_alt)/(T(k)-T(k-1));
    else
      JD_x_inv = zeros(size(J_x_inv_alt));
      Phi_qD = Phi_q_alt; % Mit Null initialisiert
      Phi_xD = Phi_x_alt;
    end
  else
    if ~dof_3T2R
      Phi_qD = %PN%_constr4gradD_q(q_k, qD_k, s_q);
      Phi_xD = %PN%_constr4gradD_x(x_k, xD_k, s_x);
      JD_x_inv = Phi_q\(Phi_qD/Phi_q*Phi_x - Phi_xD); % Siehe: ParRob/jacobiD_qa_x
    else
      if (length(q_k) == 25)% fuer symmetrische 3T2R-PKM
        [Phi_qD,Phi_qD_voll] = %PN%_constr2gradD_q(q_k, qD_k, x_k, xD_k, s_2qd);
        [~,Phi_xD_voll] = %PN%_constr2gradD_x(q_k, qD_k, x_k, xD_k, s_2xd);
      else 
        [Phi_qD,Phi_qD_voll] = %PN%_constr3gradD_q(q_k, qD_k, x_k, xD_k, s_3qd);
        [~,Phi_xD_voll] = %PN%_constr3gradD_x(q_k, qD_k, x_k, xD_k, s_3xd);
      end
      I = s.I_constr_red;
      Phi_xD=Phi_xD_voll(I,I_EE); % TODO: Schon in Funktion richtig machen.
      if (length(q_k) == 25)% fuer symmetrische 3T2R-PKM
        Phi_qD = Phi_qD_voll(s.I_constr_red,:);
      end
      % Zeitableitung der inversen Jacobi-Matrix konsistent mit obiger
      % Form. Wird für Berechnung der Coriolis-Kräfte benutzt. Bei Kräften
      % spielt die Aufgabenredundanz keine Rolle.
      JD_x_inv = Phi_q_voll\(Phi_qD_voll/Phi_q_voll*Phi_x_voll - Phi_xD_voll);
    end
  end
  if ~dof_3T2R
    qDD_k_T =  J_x_inv * xDD_k(I_EE) + JD_x_inv * xD_k(I_EE); % Gilt nur ohne AR.
  else
    % Direkte Berechnung aus der zweiten Ableitung der Zwangsbedingungen.
    % Siehe [3]. JD_x_inv ist nicht im Fall der Aufgabenredundanz definiert.
    qDD_k_T = -Phi_q\(Phi_qD*qD_k+Phi_xD*xD_k(I_EE)+Phi_x*xDD_k(I_EE));
  end
  if debug % Erneuter Test
    PhiDD_test3 = Phi_q*qDD_k_T + Phi_qD*qD_k + ...
      Phi_x*xDD_k(I_EE)+Phi_xD*xD_k(I_EE);
    if any(abs(PhiDD_test3) > 1e-2)
      error('Beschleunigung qDD_k_T erfuellt die kinematischen Bedingungen nicht');
    end
  end
  if nsoptim || limits_qD_set
    N = (eye(s.NJ) - pinv(Phi_q)* Phi_q);
  end
  if nsoptim % Nullraumbewegung
    % Berechne Gradienten der zusätzlichen Optimierungskriterien
    v = zeros(s.NJ, 1);
    if wn(1) ~= 0
      [~, h1dq] = invkin_optimcrit_limits1(q_k, qlim);
      v = v - wn(1)*h1dq';
    end
    if wn(2) ~= 0
      [~, h2dq] = invkin_optimcrit_limits2(q_k, qlim);
      v = v - wn(2)*h2dq';
      if any(isinf(h2dq)), warning('h2dq Inf'); return; end
    end
    if wn(3) ~= 0
      [~, h3dq] = invkin_optimcrit_limits1(qD_k, qDlim);
      v = v - wn(3)*h3dq';
    end
    if wn(4) ~= 0
      [~, h4dq] = invkin_optimcrit_limits2(qD_k, qDlim);
      v = v - wn(4)*h4dq';
    end
    qDD_N_pre = N * v;
  else
    qDD_N_pre = zeros(s.NJ, 1);
  end
  if limits_qD_set
    qDD_pre = qDD_k_T + qDD_N_pre;
    qD_pre = qD_k + qDD_pre*dt;
    deltaD_ul = (qDmax - qD_pre); % Überschreitung der Maximalwerte: <0
    deltaD_ll = (-qDmin + qD_pre); % Unterschreitung Minimalwerte: <0
    if any([deltaD_ul;deltaD_ll] < 0)
      if min(deltaD_ul)<min(deltaD_ll)
        % Verletzung nach oben ist die größere
        [~,I_worst] = min(deltaD_ul);
        qDD_lim_I = (qDmax(I_worst)-qD_k(I_worst))/dt;% [3]/(3)
      else
        % Verletzung nach unten ist maßgeblich
        [~,I_worst] = min(deltaD_ll);
        qDD_lim_I = (qDmin(I_worst)-qD_k(I_worst))/dt;
      end
      qD_pre_h = qD_pre;
      qD_pre_h(~(deltaD_ll<0|deltaD_ul<0)) = 0; % Nur Reduzierung, falls Grenze verletzt
      [~, hdqD] = invkin_optimcrit_limits1(qD_pre_h, qDlim);
      qDD_N_h = N * (-hdqD');
      % Normiere den Vektor auf den am stärksten grenzverletzenden Eintrag
      qDD_N_he = qDD_N_h/qDD_N_h(I_worst); % [3]/(5)
      % Stelle Nullraumbewegung so ein, dass schlechtester Wert gerade so
      % an der Grenze landet.
      qDD_N_korr_I = -qDD_pre(I_worst) + qDD_lim_I; % [3]/(7)
      % Erzeuge kompletten Vektor als durch Skalierung des Nullraum-Vektors
      qDD_N_korr = qDD_N_korr_I*qDD_N_he; % [3]/(8)
      qDD_N_post = qDD_N_pre+qDD_N_korr; % [3]/(6)
    else
      qDD_N_post = qDD_N_pre;
    end
  else
    qDD_N_post = qDD_N_pre;
  end
  qDD_k = qDD_k_T + qDD_N_post;
  
  % Teste die Beschleunigung (darf die Zwangsbedingungen nicht verändern)
  if debug
    % Das wäre eigentlich gar nicht notwendig, wenn die Beschleunigung
    % eine korrekte Nullraumbewegung ausführt.
    PhiDD_pre = Phi_q*qDD_k + Phi_qD*qD_k;
    PhiDD_korr = -PhiDD_pre - (Phi_x*xDD_k(I_EE)+Phi_xD*xD_k(I_EE));
    if any(abs(PhiDD_korr) > 1e-8)
      error('Beschleunigung ist nicht konsistent nach Nullraumbewegung. Fehler %1.1e', max(abs(PhiDD_korr)));
      % Dieser Teil sollte nicht ausgeführt werden müssen (s.o.)
      qDD_korr = Phi_q\PhiDD_korr; %#ok<UNRCH>
      qDD_k = qDD_k + qDD_korr;
      % Nochmal testen
      PhiDD_test2 = Phi_q*qDD_k + Phi_qD*qD_k + ...
        Phi_x*xDD_k(I_EE)+Phi_xD*xD_k(I_EE);
      if any(abs(PhiDD_test2) > 1e-10)
        error('Korrektur der Beschleunigung hat nicht funktioniert');
      end
    end
  end
  %% Anfangswerte für Positionsberechnung in nächster Iteration
  % Berechne Geschwindigkeit aus Linearisierung für nächsten Zeitschritt
  qDk0 = qD_k + qDD_k*dt;
  % Aus Geschwindigkeit berechneter neuer Winkel für den nächsten Zeitschritt
  % Taylor-Reihe bis 2. Ordnung für Position (Siehe [2])
  qk0 = q_k + qD_k*dt + 0.5*qDD_k*dt^2;

  %% Ergebnisse speichern
  QD(k,:) = qD_k;
  QDD(k,:) = qDD_k;
  if nargout >= 5
    Jinv_ges(k,:) = J_x_inv(:);
  end
  if nargout >= 6
    JinvD_ges(k,:) = JD_x_inv(:);
  end
  J_x_inv_alt = J_x_inv;
  Phi_q_alt = Phi_q;
  Phi_x_alt = Phi_x;
end
