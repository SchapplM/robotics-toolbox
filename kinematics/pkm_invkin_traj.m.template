% Inverse Kinematik für allgemeinen Roboter (Komplette Trajektorie)
% Allgemeine, stark parametrierbare Funktion zum Aufruf mit allen möglichen
% Einstellungen
% Iterative Lösung der inversen Kinematik mit inverser Jacobi-Matrix
% Zusätzlich Nutzung der differentiellen Kinematik für schnellere Konvergenz
% 
% Eingabe:
% XE
%   Trajektorie von EE-Lagen (Sollwerte)
% XDE
%   Trajektorie von EE-Geschwindigkeiten (Sollwerte)
%   (Die Orientierung wird durch Euler-Winkel-Zeitableitung dargestellt)
% XDDE
%   Trajektorie von EE-Beschleunigungen (Sollwerte)
%   Orientierung bezogen auf Euler-Winkel
% T
%   Zeitbasis der Trajektorie (Alle Zeit-Stützstellen)
% q0
%   Anfangs-Gelenkwinkel für Algorithmus
% s
%   Struktur mit Eingabedaten. Felder, siehe Quelltext.
% 
% Ausgabe:
% Q
%   Trajektorie von Gelenkpositionen (Lösung der IK)
% QD
%   Trajektorie von Gelenkgeschwindigkeiten
% QDD
%   Trajektorie von Gelenkbeschleunigungen
% Jinv_ges
%   Inverse PKM-Jacobi-Matrix für alle Bahnpunkte (spaltenweise in Zeile)
%   (Jacobi zwischen allen Gelenkgeschwindigkeiten qD und EE-geschwindigkeit xDE)
%   (Nicht: Nur Bezug zu Antriebsgeschwindigkeiten qaD)
% JinvD_ges
%   Zeitableitung von Jinv_ges
% JointPos_all
%   gestapelte Positionen aller Gelenke der PKM für alle Zeitschritte
%   (Entspricht letzter Spalte aller Transformationsmatrizen aus fkine_legs)
%   Reihenfolge: Siehe Ausgabe Tc_stack_PKM aus invkin_ser
%   * PKM-Basis
%   * Für jede Beinkette: Basis und alle bewegten Körper-KS. Ohne
%     virtuelles EE-KS
%   * Kein Plattform-KS

% Diese Datei ist identisch mit: ParRob/invkin_traj.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.
% 
% TODO:
% Funktioniert noch nicht für asymmetrische PKM

% Quelle:
% [2] Aufzeichnungen Schappler vom 11.12.2018
% [3] Aufzeichnungen Schappler vom 06.07.2020
% [RMG16] Reiter et al.: Inverse Kinematics in Minimum-Time Trajectory
% Planning for Kinematically Redundant Manipulators (2016)

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2019-02
% (C) Institut für Mechatronische Systeme, Leibniz Universität Hannover

function [Q, QD, QDD, Phi, Jinv_ges, JinvD_ges, JointPos_all] = %PN%_invkin_traj(X, XD, XDD, T, q0, s, s_ser)

%% Coder Information
%#codegen
%$cgargs {coder.newtype('double',[inf,6]),coder.newtype('double',[inf,6]),
%$cgargs  coder.newtype('double',[inf,6]),coder.newtype('double',[inf,1]),
%$cgargs  zeros(%NJ%,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs       'I_EE_Task', true(1,6),
%$cgargs           'sigma', zeros(%NJ%,1),
%$cgargs    'simplify_acc', false,
%$cgargs         'mode_IK', 2,
%$cgargs           'debug', false,
%$cgargs              'wn', zeros(5,1),
%$cgargs  'I_constr_t_red', coder.newtype('double',[1,inf]),
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs    'I1constr_red', zeros(1,%NLEG%),
%$cgargs    'I2constr_red', zeros(1,%NLEG%),
%$cgargs      'I_constr_t', coder.newtype('double',[1,inf]),
%$cgargs      'I_constr_r', coder.newtype('double',[1,inf]),
%$cgargs    'I_constr_red', coder.newtype('double',[1,inf]),
%$cgargs            'I_qa', logical(zeros(%NJ%,1)),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs      'Leg_sigmaJ', zeros(%NQJ%,%NLEG%),
%$cgargs        'Leg_qlim', zeros(6,2*%NLEG%),
%$cgargs        'Leg_qDlim', zeros(6,2*%NLEG%),
%$cgargs        'Leg_qDDlim', zeros(6,2*%NLEG%),
%$cgargs  'Leg_phiconv_W_E', uint8(zeros(%NLEG%,1))),
%$cgargs struct(    'reci', true,
%$cgargs               'K', zeros(%NQJ%,1),
%$cgargs      'maxrelstep', 0.1,
%$cgargs       'normalize', false,
%$cgargs      'condlimDLS', 60,
%$cgargs      'lambda_min', 2e-4,
%$cgargs           'n_min', 0,
%$cgargs           'n_max', 1000,
%$cgargs        'rng_seed', 0,
%$cgargs        'Phit_tol', 1.0000e-10,
%$cgargs        'Phir_tol', 1.0000e-10)}
coder.extrinsic('tic');
coder.extrinsic('toc');
coder.extrinsic('fprintf');
coder.extrinsic('warning');
%% Initialisierung
Rob_I_EE = %I_EE%;
NJ = %NJ%;
NLEG = %NLEG%;
NL = %NL%;
Leg_I_EElink = %Leg_I_EElink%;
Leg_NQJ = %Leg_NQJ%;
I_EE = s.I_EE_Task;
mode_IK = s.mode_IK;
taskred_rot = false;
debug = s.debug;
wn = s.wn;
if any(s.wn ~= 0) && sum(Rob_I_EE) > sum(s.I_EE_Task)
  % Nullraumoptimierung nur möglich, falls FG da sind. TODO: Das
  % berücksichtigt noch nicht den Fall von 3T3R-PKM in 3T0R-Aufgaben.
  nsoptim = true;
else
  % Keine zusätzlichen Optimierungskriterien
  nsoptim = false;
end
if Rob_I_EE(6) && ~s.I_EE_Task(6)
  taskred_rot = true;
end
% Vermerke, ob die PKM strukturen 3T2R-FG hat. Dann wird auch die
% Modellierung für 3T2R-Aufgaben gewählt.
if all(Rob_I_EE == logical([1 1 1 1 1 0]))
  dof_3T2R = true;
else
  dof_3T2R = false;
end

if nargout == 6
  % Wenn Jacobi-Zeitableitung als Ausgabe gefordert ist, kann die
  % vollständige Formel für die Beschleunigung benutzt werden
  simplify_acc = false;
else
  % Benutze vollständige Formel entsprechend Einstellungsparameter
  simplify_acc = s.simplify_acc;
end

qlim = NaN(NJ,2);
qDlim = NaN(NJ,2);
qDDlim = NaN(NJ,2);
J1 = 1;
for i = 1:NLEG
  J2 = J1+Leg_NQJ(i)-1;
  qlim(J1:J2,:) = s.Leg_qlim(1:Leg_NQJ(i),(1+2*(i-1)):(2+2*(i-1)));
  qDlim(J1:J2,:) = s.Leg_qDlim(1:Leg_NQJ(i),(1+2*(i-1)):(2+2*(i-1)));
  qDDlim(J1:J2,:) = s.Leg_qDDlim(1:Leg_NQJ(i),(1+2*(i-1)):(2+2*(i-1)));
  J1 = J2+1;
end
if ~all(isnan(qlim(:)))
  limits_q_set = true;
  qmin = qlim(:,1);
  qmax = qlim(:,2);
else
  limits_q_set = false;
  qmin = -inf(NJ,1);
  qmax =  inf(NJ,1);
end
if ~all(isnan(qDlim(:)))
  limits_qD_set = true;
  qDmin = qDlim(:,1);
  qDmax = qDlim(:,2);
else
  limits_qD_set = false;
  qDmin = -inf(NJ,1);
  qDmax =  inf(NJ,1);
end
if ~all(isnan(qDDlim(:)))
  limits_qDD_set = true;
  qDDmin = qDDlim(:,1);
  qDDmax = qDDlim(:,2);
else
  limits_qDD_set = false;
  qDDmin = -inf(NJ,1);
  qDDmax =  inf(NJ,1);
end

if ~any(wn ~= 0)
  nsoptim = false; % Keine zusätzlichen Optimierungskriterien
end
% Vergleiche FG der Aufgabe und FG des Roboters
if ~nsoptim
  % Deaktiviere limits_qD_set, wenn es keinen Nullraum gibt
  limits_qD_set = false;
end

% Altwerte für die Bildung des Differenzenquotienten initialisieren.
% Sonstige Variablen für Matlab-Coder vorbelegen. Sonst Kompilierungsfehler
J_x_inv = NaN(NJ,sum(Rob_I_EE));
Phi_q_alt = zeros(length(s.I_constr_t_red)+length(s.I_constr_r_red), NJ);
Phi_q_voll_alt = zeros(6*NLEG, NJ);
Phi_qD_voll = Phi_q_voll_alt;
Phi_x_alt = zeros(length(s.I_constr_t_red)+length(s.I_constr_r_red), sum(I_EE));
Phi_x_voll_alt = zeros(6*NLEG, 6);
Phi_xD_voll = Phi_x_voll_alt;
Phi_q_voll = Phi_q_voll_alt;
Phi_x_voll = Phi_x_voll_alt;
N = eye(NJ); % Nullraum-Projektor
Phi_x = Phi_x_alt; %#ok<NASGU>
Phi_xD = Phi_x_alt; %#ok<NASGU>
% Eingabestruktur für tpl-fcns
% Struktur 1 für %PN%_invkin
s_par = struct('r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
            'I1constr_red', s.I1constr_red,...
            'I2constr_red', s.I2constr_red,...
                   'T_P_E', s.T_P_E,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
               'I_EE_Task', s.I_EE_Task,...
              'Leg_sigmaJ', s.Leg_sigmaJ,...
                'Leg_qlim', s.Leg_qlim,...
         'Leg_phiconv_W_E', s.Leg_phiconv_W_E, ...
     'abort_firstlegerror', false);
% Struktur 2 für %PN%_invkin
s_ik_ser = struct( ...
  'reci', s_ser.reci, ...
  'K', s_ser.K, ...
  'Kn', zeros(%NQJ%,1), ... % Keine Nullraumoptimierung sinnvoll. ...
  'wn', zeros(3,1), ... % ... Wird in Traj. gemacht.
  ... % % Keine Herunterskalierung bei Grenzüberschreitung (würde Stillstand 
  ... % erzeugen; da keine Nullraumbewegung gemacht wird, kann die Grenz-
  ... % verletzung sowieso nicht verhindert werden.
  'scale_lim', 0, ...
  'maxrelstep', s_ser.maxrelstep, ... 
  'normalize', s_ser.normalize, ... 
  'condlimDLS', s_ser.condlimDLS, ... 
  'lambda_min', s_ser.lambda_min, ... 
  'n_min', s_ser.n_min, ...
  'n_max', s_ser.n_max, ...
  'rng_seed', s_ser.rng_seed, ...
  'Phit_tol', s_ser.Phit_tol, ...
  'Phir_tol', s_ser.Phir_tol, ...
  'retry_limit', 0); % keine Neuversuche (würde Sprung erzeugen)
% Struktur für %PN%_constr4grad_q
s_q = struct(...
          'I_constr_t_red', s.I_constr_t_red,...
          'I_constr_r_red', s.I_constr_r_red,...
            'I_constr_t', s.I_constr_t,...
            'I_constr_r', s.I_constr_r,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
 % Struktur für %PN%_constr4grad_x
 s_x = struct(...
          'I_constr_t_red', s.I_constr_t_red,...
          'I_constr_r_red', s.I_constr_r_red,...
              'I_constr_t', s.I_constr_t,...
              'I_constr_r', s.I_constr_r,...
               'r_P_B_all', s.r_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task);
% Struktur für %PN%_invkin3_tpl
s_tpl = struct(...
       'I_EE_Task', s.I_EE_Task,...
           'sigma', s.sigma,...
               'K', repmat(s_ser.K,NLEG,1),...
              'Kn', zeros(%NQJ%*NLEG,1),...
              'wn', zeros(4,1),...
      'maxstep_ns', 0,... % ohne Nullraumbewegung nicht sinnvoll
       'normalize', s_ser.normalize,...
      'condlimDLS', s_ser.condlimDLS, ... 
      'lambda_min', s_ser.lambda_min, ... 
           'n_min', s_ser.n_min,...
           'n_max', s_ser.n_max,...
        'rng_seed', s_ser.rng_seed,...
       'scale_lim', 0,... % ohne Nullraumbewegung nicht sinnvoll
        'Phit_tol', s_ser.Phit_tol,...
        'Phir_tol', s_ser.Phir_tol,...
      'maxrelstep', s_ser.maxrelstep,...
   'maxrelstep_ns', 0,... % ohne Nullraumbewegung nicht sinnvoll
'finish_in_limits', false,... % ohne Nullraumbewegung nicht sinnvoll
     'retry_limit', 0,... % keine Neuversuche (würde Sprung erzeugen)
  'I_constr_t_red', s.I_constr_t_red,...
  'I_constr_r_red', s.I_constr_r_red,...
    'I_constr_red', s.I_constr_red,...
            'I_qa', false(%NJ%,1),... % nicht benötigt, da keine Nullraumbewegung (und damit keine PKM-Jacobi zu optimieren)
       'r_P_B_all', s.r_P_B_all,...
     'phi_P_B_all', s.phi_P_B_all,...
     'phiconv_W_E', s.phiconv_W_E,...
           'T_P_E', s.T_P_E,...
   'Leg_I_EE_Task', s.Leg_I_EE_Task,...
    'Leg_pkin_gen', s.Leg_pkin_gen,...
   'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
   'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
     'Leg_phi_W_0', s.Leg_phi_W_0,...
 'Leg_phiconv_W_0', s.Leg_phiconv_W_0,...
        'Leg_qlim', s.Leg_qlim);
% Struktur für %PN%_constr3grad_q
s_3q = struct(...
               'I_EE_Task', s.I_EE_Task,...
               'r_P_B_all', s.r_P_B_all,...
             'phi_P_B_all', s.phi_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Struktur für %PN%_constr3grad_x
s_3x = struct(...
            'I_constr_red', s.I_constr_red,...
             'phi_P_B_all', s.phi_P_B_all,...
                   'T_P_E', s.T_P_E,...
             'phiconv_W_E', s.phiconv_W_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Struktur für %PN%_constr3gradD_q
s_3qd = struct(...
               'I_EE_Task', s.I_EE_Task,...
          'I_constr_t_red', s.I_constr_t_red,...
             'phi_P_B_all', s.phi_P_B_all,...
             'r_P_B_all', s.r_P_B_all,...
             'phiconv_W_E', s.phiconv_W_E,...
                   'T_P_E', s.T_P_E,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Struktur für %PN%_constr3gradD_x
s_3xd = struct(...
            'I_constr_red', s.I_constr_red,...
          'I_constr_t_red', s.I_constr_t_red,...
             'phi_P_B_all', s.phi_P_B_all,...
                   'T_P_E', s.T_P_E,...
             'phiconv_W_E', s.phiconv_W_E,...
            'Leg_pkin_gen', s.Leg_pkin_gen,...
           'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
           'Leg_I_EE_Task', s.Leg_I_EE_Task,...
             'Leg_phi_W_0', s.Leg_phi_W_0,...
         'Leg_phiconv_W_0', s.Leg_phiconv_W_0);
% Prüfe Felder der Einstellungs-Struktur und setze Standard-Werte, falls
% Eingabe nicht gesetzt

nt = length(T);
Q = NaN(nt, NJ);
QD = Q;
QDD = Q;
Phi = NaN(nt, length(s.I_constr_t_red)+length(s.I_constr_r_red));
% Definition der Jacobi-Matrix.
% Hier werden die strukturellen FG des Roboters benutzt und nicht die
% Aufgaben-FG. Ist besonders für 3T2R relevant. Dort ist die Jacobi-Matrix
% bezogen auf die FG der Plattform ohne Bezug zur Aufgabe.
Jinv_ges = NaN(nt, sum(Rob_I_EE)* NJ);
JinvD_ges = zeros(nt, sum(Rob_I_EE)* NJ);

% Gelenkkonfiguration, bei der Nebenbed. 5 (Kondition) das letzte mal
% berechnet wurde
q_wn5 = inf(%NJ%,1);
% Gradient von Nebenbedingung 5
h5dq = NaN(1,%NJ%);

JointPos_all = NaN(nt, (1+NL-2+NLEG)*3);
qk0 = q0;
qDk0 = zeros(NJ,1);
q_k = qDk0; % für Kompilierbarkeit
Tc_stack_k = NaN((%NL%-1+%NLEG%)*3,4); % für Kompilierbarkeit
Phi_k = zeros(size(Phi,2),1); % für Kompilierbarkeit
dt = T(2)-T(1); % Init. fuer tpl

for k = 1:nt
  tic();
  x_k = X(k,:)';
  xD_k = XD(k,:)';
  xDD_k = XDD(k,:)';
  if k < nt % Schrittweite für letzten Zeitschritt angenommen wie vorletzter
    dt = T(k+1)-T(k); % Zeit bis zum nächsten Abtastpunkt
  end
  %% Gelenk-Position berechnen
  % Die Positions-IK wird nur als Korrekturschritt benutzt (Ausgleich
  % numerischer Fehler). Versuche erst die IK für alle Beinketten einzeln.
  % Annahme: Startwert und Vorwärts-Integration sind schon fast die Lösung.
  if any(mode_IK == [1 3])
    % Aufruf der Einzel-Beinketten-Funktion (etwas schneller, falls mit mex)
    [q_k, Phi_k, Tc_stack_k] = %PN%_invkin(x_k, qk0, s_par, s_ik_ser);
  end
  % Falls obige IK nicht erfolgreich (aufgrund ungeklärter Ursachen),
  % versuche alternativen Algorithmus.
  if mode_IK == 2 || mode_IK == 3 && (any(abs(Phi_k(s.I_constr_t_red)) > s_ser.Phit_tol) || ...
      any(abs(Phi_k(s.I_constr_r_red)) > s_ser.Phir_tol))
    % 3T2R-Funktion. Wird hier aber nicht als 3T2R benutzt, da keine
    % Nullraumbewegung ausgeführt wird. Ist nur andere Berechnung.
    [q_k, Phi_k, Tc_stack_k] = %PN%_invkin3(x_k, qk0, s_tpl);
  end
  % Abspeichern für Ausgabe.
  Q(k,:) = q_k;
  Phi(k,:) = Phi_k;
  JointPos_all(k,:) = Tc_stack_k(:,4);
  % Prüfe Erfolg der IK
  if any(abs(Phi_k(s.I_constr_t_red)) > s_ser.Phit_tol) || ...
     any(abs(Phi_k(s.I_constr_r_red)) > s_ser.Phir_tol)
    break; % Die IK kann nicht gelöst werden. Weitere Rechnung ergibt keinen Sinn.
  end
  %% Gelenk-Geschwindigkeit berechnen
  if ~taskred_rot && ~dof_3T2R
    % Benutze die Ableitung der Geschwindigkeits-Zwangsbedingungen
    % (effizienter als Euler-Winkel-Zwangsbedingungen)
    Phi_q = %PN%_constr4grad_q(q_k,s_q);
    Phi_x = %PN%_constr4grad_x(x_k,s_x);
    J_x_inv(:,:) = -Phi_q \ Phi_x;
  else % aufgabenredundante 2T1R/3T1R/3T3R-PKM und symmetrische und asymmetrische 3T2R-PKM
    % Nehme vollständige ZB-Gradienten (2. Ausgabe) und wähle Komponenten
    % hier aus. Reduzierte ZB sind noch nicht vollständig implementiert für
    % Systeme mit Beinketten mit fünf Gelenken.
    [Phi_q, Phi_q_voll] = %PN%_constr3grad_q(q_k, x_k, s_3q);
    [Phi_x_tmp, Phi_x_voll] = %PN%_constr3grad_x(q_k, x_k, s_3x);
    Phi_x=Phi_x_tmp(:,I_EE);
    if taskred_rot % Aufgabenredundanz
      J_x_inv(:,:) = -Phi_q_voll \ Phi_x_voll(:,Rob_I_EE); % Zuweisung mit ":" für mex
    else %dof_3T2R; PKM mit strukturell nur 3T2R FG. Nehme die Jacobi mit reduzierten FG
      J_x_inv(:,:) = -Phi_q \ Phi_x;
    end
  end
  if ~(nsoptim || limits_qD_set)
    if ~taskred_rot || ... % beliebige PKM (3T0R, 3T1R, 3T3R) ohne Aufg.Red.
        dof_3T2R % beliebige 3T2R-PKM
      qD_k = J_x_inv * xD_k(I_EE);
    else
      % Bei Aufgabenredundanz ist J_x_inv anders definiert
      qD_k = -Phi_q \ Phi_x * xD_k(I_EE);
    end
  else % Nullraum-Optimierung
    % Korrekturterm für Linearisierungsfehler. Für PhiD_pre=0 entsteht die
    % normale inverse differentielle Kinematik. Mit dem Korrekturterm
    % bleibt die Geschwindigkeit konsistent zur Nullraumbewegung aus der
    % Beschleunigung
    PhiD_pre = Phi_q*qDk0;
    PhiD_korr = -PhiD_pre - Phi_x*xD_k(I_EE);
    qD_korr = Phi_q\PhiD_korr;
    qD_k = qDk0 + qD_korr;
    if debug % Erneuter Test
      PhiD_test = Phi_x*xD_k(I_EE) + Phi_q*qD_k;
      if any(abs(PhiD_test) > max(1e-10, max(abs(qD_k))/1e9)) % bei hohen Geschwindigkeiten ist die Abweichung größer; feine IK-Toleranz notwendig.
        error(['Korrektur der Geschwindigkeit hat nicht funktioniert (k=%d). ', ...
          'Fehler %1.1e'], k, max(abs(PhiD_test)));
      end
    end
  end
  %% Zeitableitung der Zwangsbedingungs-Gradienten und der Jacobi-Matrix
  % Zeitableitung der Zwangsbedingungs-Gradienten zuerst
  if simplify_acc % Keine explizite Berechnung der Zeitableitung (Zeitersparnis)
    if k > 1 % linksseitiger Differenzenquotient
      Phi_qD = (Phi_q - Phi_q_alt)/(T(k)-T(k-1));
      Phi_xD = (Phi_x - Phi_x_alt)/(T(k)-T(k-1));
      if taskred_rot
        Phi_qD_voll = (Phi_q_voll - Phi_q_voll_alt)/(T(k)-T(k-1));
        Phi_xD_voll = (Phi_x_voll - Phi_x_voll_alt)/(T(k)-T(k-1));
      end
    else
      Phi_qD = Phi_q_alt; % Mit Null initialisiert
      Phi_xD = Phi_x_alt;
      Phi_qD_voll = Phi_q_voll_alt;
      Phi_xD_voll = Phi_x_voll_alt;
    end
  else % Vollständige Berechnung
    if ~taskred_rot && ~dof_3T2R
      Phi_qD = %PN%_constr4gradD_q(q_k, qD_k, s_q);
      Phi_xD = %PN%_constr4gradD_x(x_k, xD_k, s_x);
    else % alle 3T2R-PKM und aufgabenredundante 3T3R-PKM
      [Phi_qD,     Phi_qD_voll] = %PN%_constr3gradD_q(q_k, qD_k, x_k, xD_k, s_3qd);
      [Phi_xD_tmp, Phi_xD_voll] = %PN%_constr3gradD_x(q_k, qD_k, x_k, xD_k, s_3xd);
      Phi_xD=Phi_xD_tmp(:,I_EE);
    end
  end
  % Danach getrennt die Zeitableitung von Jinv. Für den Differenzen-
  % quotienten genauer, wenn JD_x_inv über Phi_qD und Phi_xD gebildet wird
  % und nicht über einen eigenen Differenzenquotienten.
  if nargout >= 6
    if taskred_rot % Aufgabenredundanz
      % Zeitableitung der inversen Jacobi-Matrix konsistent mit obiger
      % Form. Wird für Berechnung der Coriolis-Kräfte benutzt. Bei Kräften
      % spielt die Aufgabenredundanz keine Rolle.
      JD_x_inv = Phi_q_voll\(Phi_qD_voll*(Phi_q_voll\Phi_x_voll(:,Rob_I_EE))...
        -Phi_xD_voll(:,Rob_I_EE));
    else % alle anderen
      JD_x_inv = Phi_q\(Phi_qD*(Phi_q\Phi_x) - Phi_xD);
    end
  end
  %% Gelenk-Beschleunigung berechnen
  % Direkte Berechnung aus der zweiten Ableitung der Zwangsbedingungen.
  % Siehe [3]. JD_x_inv ist nicht im Fall der Aufgabenredundanz definiert.
  qDD_k_T = -Phi_q\(Phi_qD*qD_k+Phi_xD*xD_k(I_EE)+Phi_x*xDD_k(I_EE));
  % Alternative Berechnung:
  % Die Rechnung mit Zeitableitung der inversen Jacobi funktioniert nur
  % bei vollem Rang. Bei strukturell 3T2R mit Rangverlust ist die
  % Rechnung numerisch ungünstig (Vermutung). Nutze die folgende Formel
  % daher nicht mehr. Mit dieser Formel ist die Beschleunigung für
  % 3T2R-PKM sonst bei Rangverlust nicht konsistent. Auch bei 3T0R
  % problematisch (da numerische Implementierung der beiden Formeln für
  % qDD_k_T anders ist. Gilt nur ohne AR und bei Beingelenkzahl=Anzahl EE-FG
  % qDD_k_T =  J_x_inv * xDD_k(I_EE) + JD_x_inv * xD_k(I_EE);
  if debug % Erneuter Test
    PhiDD_test3 = Phi_q*qDD_k_T + Phi_qD*qD_k + ...
      Phi_x*xDD_k(I_EE)+Phi_xD*xD_k(I_EE);
    if any(abs(PhiDD_test3) > max(1e-6, max(abs([qD_k;qDD_k_T]))/1e9)) % bei hohen Werten ist die Abweichung größer; feine IK-Toleranz notwendig.
      error(['Beschleunigung qDD_k_T erfuellt die kinematischen Bedingungen ', ...
        'nicht. Max. Fehler %1.2e'], max(abs(PhiDD_test3)));
    end
  end
  % Setze die Grenzen für qDD_N basierend auf gegebenen Grenzen für 
  % gesamte Beschleunigung und notwendige Beschleunigung qDD_T
  qDD_N_min = qDDmin - qDD_k_T;
  qDD_N_max = qDDmax - qDD_k_T;
  if nsoptim % Nullraumbewegung
    N = (eye(NJ) - pinv(Phi_q)* Phi_q); % Nullraum-Projektor
    % Berechne Gradienten der zusätzlichen Optimierungskriterien
    v = zeros(NJ, 1);
    if wn(1) ~= 0
      [~, h1dq] = invkin_optimcrit_limits1(q_k, qlim);
      v = v - wn(1)*h1dq';
    end
    if wn(2) ~= 0
      [~, h2dq] = invkin_optimcrit_limits2(q_k, qlim);
      v = v - wn(2)*h2dq';
    end
    if wn(3) ~= 0
      [~, h3dq] = invkin_optimcrit_limits1(qD_k, qDlim);
      v = v - wn(3)*h3dq';
    end
    if wn(4) ~= 0
      [~, h4dq] = invkin_optimcrit_limits2(qD_k, qDlim);
      v = v - wn(4)*h4dq';
    end
    if wn(5) ~= 0 % Konditionszahl der Jacobi-Matrix der Inv. Kin.
      if any(abs(q_k-q_wn5) > 1*pi/180) % seltenere Berechnung (Rechenzeit)
        condPhi = cond(Phi_q);
        for kkk = 1:%NJ% % Differenzenquotient für jede Gelenkkoordinate
          q_test = q_k; % ausgehend von aktueller Konfiguration
          q_test(kkk) = q_test(kkk) + 1e-6; % minimales Inkrement
          Phi_q_kkk = %PN%_constr3grad_q(q_test, x_k, s_3q);
          condPhi_kkk = cond(Phi_q_kkk);
          h5dq(kkk) = (condPhi_kkk-condPhi)/1e-6;
        end
        q_wn5 = q_k;
      end
      v = v - wn(5)*h5dq';
    end
    qDD_N_pre = N * v;
  else
    qDD_N_pre = zeros(NJ, 1);
  end
  
  % Reduziere die Nullraumbeschleunigung weiter, falls Beschleunigungs-
  % Grenzen erreicht werden. Sollte eigentlich nur hier gemacht werden,
  % wird aber zur Verbesserung der Robustheit auch zusätzlich noch unten
  % gemacht. Hat unten zur Folge, dass Verletzung von Positions- und
  % Geschwindigkeitsgrenzen nicht mit allen Mitteln verhindert werden
  if nsoptim && limits_qDD_set
    delta_ul_rel = (qDD_N_max - qDD_N_pre)./(qDD_N_max); % Überschreitung der Maximalwerte: <0
    delta_ll_rel = (-qDD_N_min + qDD_N_pre)./(-qDD_N_min); % Unterschreitung Minimalwerte: <0
    if any([delta_ul_rel;delta_ll_rel] < 0)
      if min(delta_ul_rel)<min(delta_ll_rel)
        % Verletzung nach oben ist die größere
        [~,I_max] = min(delta_ul_rel);
        scale = (qDD_N_max(I_max))/(qDD_N_pre(I_max));
      else
        % Verletzung nach unten ist maßgeblich
        [~,I_min] = min(delta_ll_rel);
        scale = (qDD_N_min(I_min))/(qDD_N_pre(I_min));
      end
      qDD_N_pre = scale*qDD_N_pre;
    end
  end
  
  if nsoptim && limits_qD_set % Nullraum-Optimierung erlaubt Begrenzung der Gelenk-Geschwindigkeit
    qDD_pre = qDD_k_T + qDD_N_pre;
    qD_pre = qD_k + qDD_pre*dt;
    deltaD_ul = (qDmax - qD_pre); % Überschreitung der Maximalwerte: <0
    deltaD_ll = (-qDmin + qD_pre); % Unterschreitung Minimalwerte: <0
    if any([deltaD_ul;deltaD_ll] < 0)
      if min(deltaD_ul)<min(deltaD_ll)
        % Verletzung nach oben ist die größere
        [~,I_worst] = min(deltaD_ul);
        qDD_lim_I = (qDmax(I_worst)-qD_k(I_worst))/dt;% [3]/(3)
      else
        % Verletzung nach unten ist maßgeblich
        [~,I_worst] = min(deltaD_ll);
        qDD_lim_I = (qDmin(I_worst)-qD_k(I_worst))/dt;
      end
      qD_pre_h = qD_pre;
      % qD_pre_h(~(deltaD_ll<0|deltaD_ul<0)) = 0; % Nur Reduzierung, falls Grenze verletzt
      [~, hdqD] = invkin_optimcrit_limits1(qD_pre_h, qDlim);
      qDD_N_h = N * (-hdqD');
      % Normiere den Vektor auf den am stärksten grenzverletzenden Eintrag
      qDD_N_he = qDD_N_h/qDD_N_h(I_worst); % [3]/(5)
      % Stelle Nullraumbewegung so ein, dass schlechtester Wert gerade so
      % an der Grenze landet.
      qDD_N_korr_I = -qDD_pre(I_worst) + qDD_lim_I; % [3]/(7)
      % Erzeuge kompletten Vektor als durch Skalierung des Nullraum-Vektors
      qDD_N_korr = qDD_N_korr_I*qDD_N_he; % [3]/(8)
      qDD_N_post = qDD_N_pre+qDD_N_korr; % [3]/(6)
      
      % Die Nullraumbewegung zur Vermeidung der Geschwindigkeitsgrenzen
      % kann fehlschlagen, wenn die fragliche Geschwindigkeitskomponente
      % nicht im Nullraum beeinflussbar ist. Daher nochmals Begrenzung der
      % neuen Beschleunigung im Nullraum. 
      delta_ul_rel = (qDD_N_max - qDD_N_post)./(qDD_N_max); % Überschreitung der Maximalwerte: <0
      delta_ll_rel = (-qDD_N_min + qDD_N_post)./(-qDD_N_min); % Unterschreitung Minimalwerte: <0
      if any([delta_ul_rel;delta_ll_rel] < 0)
        if min(delta_ul_rel)<min(delta_ll_rel)
          % Verletzung nach oben ist die größere
          [~,I_max] = min(delta_ul_rel);
          scale = (qDD_N_max(I_max))/(qDD_N_post(I_max));
        else
          % Verletzung nach unten ist maßgeblich
          [~,I_min] = min(delta_ll_rel);
          scale = (qDD_N_min(I_min))/(qDD_N_post(I_min));
        end
        qDD_N_post = scale*qDD_N_post;
      end
    else
      qDD_N_post = qDD_N_pre;
    end
  else
    qDD_N_post = qDD_N_pre;
  end

  % Berechne maximale Nullraum-Beschleunigung bis zum Erreichen der
  % Positionsgrenzen. Reduziere, falls notwendig. Berechnung nach Betrachtung
  % der Geschwindigkeits- und Beschl.-Grenzen, da Position wichtiger ist.
  if nsoptim && limits_q_set % Nullraum-Optimierung erlaubt Begrenzung der Gelenk-Position
    qDD_pre2 = qDD_k_T+qDD_N_post;
    % Daraus berechnete Position und Geschwindigkeit im nächsten Zeitschritt
    qD_pre2 = qD_k + qDD_pre2*dt;
    q_pre2 = q_k + qD_pre2*dt + 0.5*qDD_pre2*dt^2;
    % Prüfe, ob Grenzen damit absehbar verletzt werden
    delta_ul = (qmax - q_pre2); % Überschreitung der Maximalwerte: <0
    delta_ll = (-qmin + q_pre2); % Unterschreitung Minimalwerte: <0
    if any([delta_ul;delta_ll] < 0)
      if min(delta_ul)<min(delta_ll)
        % Verletzung nach oben ist die größere
        [~,I_worst] = min(delta_ul);
        qDD_lim_I = 2/dt^2*(qmax(I_worst)-q_k(I_worst)-qD_pre2(I_worst)*dt);
      else
        % Verletzung nach unten ist maßgeblich
        [~,I_worst] = min(delta_ll);
        qDD_lim_I = 2/dt^2*(qmin(I_worst)-q_k(I_worst)-qD_pre2(I_worst)*dt);
      end
      q_pre_h = q_pre2;
      [~, hdq] = invkin_optimcrit_limits1(q_pre_h, qlim);
      % Dieser Beschleunigungsvektor liegt im Nullraum der Jacobi-Matrix
      % (erfüllt also noch die Soll-Beschleunigung des Endeffektors).
      % Der Vektor führt zu einer Reduzierung der Geschwindigkeit von den
      % Grenzen weg
      qDD_N_h = N * (-hdq');
      % Normiere den Vektor auf den am stärksten grenzverletzenden Eintrag
      qDD_N_he = qDD_N_h/qDD_N_h(I_worst); % [3]/(5)
      % Stelle Nullraumbewegung so ein, dass schlechtester Wert gerade so
      % an der Grenze landet.
      qDD_N_korr_I = -qDD_pre2(I_worst) + qDD_lim_I; % [3]/(7)
      % Erzeuge kompletten Vektor als durch Skalierung des Nullraum-Vektors
      qDD_N_korr = qDD_N_korr_I*qDD_N_he; % [3]/(8)
      qDD_N_post2 = qDD_N_post+qDD_N_korr; % [3]/(6)
      if false % Debug
        Iutest = q_k + qD_k*dt + 0.5*(qDD_k_T+qDD_N_post2)*dt^2 > qmax + 1e-6;
        Iltest = q_k + qD_k*dt + 0.5*(qDD_k_T+qDD_N_post2)*dt^2 < qmin - 1e-6;
        if min(delta_ul)<min(delta_ll) && Iutest(I_worst)
          error('Fehler bei Korrektur der Verletzung der Positions-Obergrenze');
        end
        if min(delta_ul)>min(delta_ll) && Iltest(I_worst)
          error('Fehler bei Korrektur der Verletzung der Positions-Untergrenze');
        end
        if any(Iutest|Iltest)
          warning(['Beim Versuch die Verletzung der Positions-Grenze fuer ', ...
            'Gelenk %d zu vermeiden, wurde eine andere Grenze verletzt'], I_worst);
        end
      end
      % Die Nullraumbewegung zur Vermeidung der Positionsgrenzen
      % kann fehlschlagen, wenn die fragliche Gelenkwinkelkomponente
      % nicht im Nullraum beeinflussbar ist. Daher nochmals Begrenzung der
      % neuen Beschleunigung im Nullraum. 
      delta_ul_rel = (qDD_N_max - qDD_N_post2)./(qDD_N_max); % Überschreitung der Maximalwerte: <0
      delta_ll_rel = (-qDD_N_min + qDD_N_post2)./(-qDD_N_min); % Unterschreitung Minimalwerte: <0
      if any([delta_ul_rel;delta_ll_rel] < 0)
        if min(delta_ul_rel)<min(delta_ll_rel)
          % Verletzung nach oben ist die größere
          [~,I_max] = min(delta_ul_rel);
          scale = (qDD_N_max(I_max))/(qDD_N_post2(I_max));
        else
          % Verletzung nach unten ist maßgeblich
          [~,I_min] = min(delta_ll_rel);
          scale = (qDD_N_min(I_min))/(qDD_N_post2(I_min));
        end
        qDD_N_post2 = scale*qDD_N_post2;
      end
    else
      % Keine Verletzung der Geschwindigkeitsgrenzen. Lasse
      % Beschleunigung so wie sie ist
      qDD_N_post2 = qDD_N_post;  
    end
  else
    qDD_N_post2 = qDD_N_post;
  end

  qDD_k = qDD_k_T + qDD_N_post2;
  % Teste die Beschleunigung (darf die Zwangsbedingungen nicht verändern)
  if debug
    % Das wäre eigentlich gar nicht notwendig, wenn die Beschleunigung
    % eine korrekte Nullraumbewegung ausführt.
    PhiDD_pre = Phi_q*qDD_k + Phi_qD*qD_k;
    PhiDD_korr = -PhiDD_pre - (Phi_x*xDD_k(I_EE)+Phi_xD*xD_k(I_EE));
    if any(abs(PhiDD_korr) > max(1e-7, max(abs(qDD_k))/1e9)) % bei hohen Beschleunigungen ist die Abweichung größer; feine IK-Toleranz notwendig.
      if cond(Phi_q) > 1e8
        % Dieser Teil sollte nicht ausgeführt werden müssen. Bei schlechter
        % Konditionierung der Zwangsbedingungs-Gradienten notwendig.
        % Nur beim Debuggen machen, da derartig schlecht konditionierte
        % Roboter sowieso nicht simuliert werden sollten.
        qDD_korr = Phi_q\PhiDD_korr;
        qDD_k = qDD_k + qDD_korr;
        % Nochmal testen
        PhiDD_test2 = Phi_q*qDD_k + Phi_qD*qD_k + ...
          Phi_x*xDD_k(I_EE)+Phi_xD*xD_k(I_EE);
        if any(abs(PhiDD_test2) > 1e-10)
          error('Korrektur der Beschleunigung hat nicht funktioniert');
        end
      else
        error(['Zeitschritt %d/%d: Beschleunigung ist nicht konsistent nach ', ...
        'Nullraumbewegung. Fehler %1.1e'], int32(k), int32(nt), max(abs(PhiDD_korr)));
      end
    end
  end
  %% Anfangswerte für Positionsberechnung in nächster Iteration
  % Berechne Geschwindigkeit aus Linearisierung für nächsten Zeitschritt
  qDk0 = qD_k + qDD_k*dt;
  % Aus Geschwindigkeit berechneter neuer Winkel für den nächsten Zeitschritt
  % Taylor-Reihe bis 2. Ordnung für Position (Siehe [2])
  qk0 = q_k + qD_k*dt + 0.5*qDD_k*dt^2;
  if any(isnan(qk0))
    break; % aufgrund von Singularität o.ä. unendlich hohe Werte
  end
  %% Ergebnisse speichern
  QD(k,:) = qD_k;
  QDD(k,:) = qDD_k;
  if nargout >= 5
    Jinv_ges(k,:) = J_x_inv(:);
  end
  if nargout >= 6
    JinvD_ges(k,:) = JD_x_inv(:);
  end
  Phi_q_alt = Phi_q;
  Phi_x_alt = Phi_x;
end
