% Ableitung der Translationskomponente der kinematischen ZB nach den Gelenkwinkeln
% 
% Variante 1:
% * Translation ausgedrückt als Vektor vom Basis-Koppelpunkt A zum
%   Plattform-Koppelpunkt B
% * Translationsfehler ist Differenz zwischen Vektor berechnet aus x und q
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% 
% Ausgabe:
% Phi_q_legs_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Translatorischer Teil
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_q_legs [3xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
% 
% Diese Datei ist identisch mit: ParRob/constr1grad_tq.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.


% Quellen:
% [2_SchapplerTapOrt2019a] Schappler, M. et al.: Modeling Parallel Robot
% Kinematics for 3T2R and 3T3R Tasks using Reciprocal Sets of Euler Angles
% (Arbeitstitel), Submitted to MDPI Robotics KaRD2, Version of 27.06.2019
% [A] Aufzeichnungen Schappler vom 15.06.2018
% [B] Aufzeichnungen Schappler vom 22.06.2018

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_q_legs_red, Phi_q_legs] = %PN%_constr1grad_tq(q, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs  'I_constr_t_red', coder.newtype('double',[1,inf]),
%$cgargs         'I1J_LEG', zeros(%NLEG%,1),
%$cgargs         'I2J_LEG', zeros(%NLEG%,1),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', zeros(%NLEG%,1),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1))}


%% Initialisierung

NLEG = %NLEG%;
NJ = %NJ%;


%% Initialisierung mit Fallunterscheidung für symbolische Eingabe

Phi_q_legs = NaN(3*NLEG,NJ);
Phi_q_legs_red = NaN(length(s.I_constr_t_red),NJ);

%% Berechnung
% Berechnung aus dem translatorischen Teil der Jacobi-Matrix der seriellen
% Beinketten 
for i = 1:NLEG
  IJ_i = s.I1J_LEG(i):s.I2J_LEG(i);
  qs = q(IJ_i); % Gelenkwinkel dieser Kette
  
  phi_0_Ai = s.Leg_phi_W_0(:,i);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(i));
  
  r_N_E = s.Leg_T_N_E_vec(4:6,i);
  J0i_i_trans = %SN%_jacobia_transl_sym_varpar(qs, uint8(s.Leg_I_EElink(i)),r_N_E,s.Leg_pkin_gen(i,:)');
  J0_i_trans = R_0_0i*J0i_i_trans; % Bezug auf das Basis-KS der PKM
  J_Ai_Bi = J0_i_trans; % Nur xyz-Koordinate in ZB.

  dPhidqJi = zeros(3*NLEG,s.Leg_NQJ(i));
  dPhidqJi_red = zeros(sum(s.I_EE(1:3))*NLEG,s.Leg_NQJ(i));

  
  % Gl. (A.25-26, B.23); siehe [2_SchapplerTapOrt2019a]/(A15) (ähnlich)
  % Kein negatives Vorzeichen, siehe Definition der Zwangsbedingungen
  dPhidqJi(3*(i-1)+1:3*(i),:) = J_Ai_Bi;
  Phi_q_legs(:,IJ_i) = dPhidqJi;
  
  % Eintragen in Ergebnis-Variable
  I1 = sum(s.I_EE(1:3))*(i-1)+1;
  I2 = I1+sum(s.I_EE(1:3))-1;
  if ~isempty(Phi_q_legs_red)
    dPhidqJi_red(I1:I2,:) = J_Ai_Bi(s.I_EE(1:3),:);
    Phi_q_legs_red(:,IJ_i) = dPhidqJi_red;
  end
end
