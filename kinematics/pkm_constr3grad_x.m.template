% Ableitung der kinematischen Zwangsbedingungen nach den EE-Koordinaten
% Bezeichnungen: 
% * Jacobi-Matrix der direkten Kinematik, 
% * geometrische Matrix der direkten Kinematik
% 
% Variante 3:
% * Implementierung der Rotation mit Führungs-Beinkette und Folge-Beinketten
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phi_x_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_x [6xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
%
% Diese Datei ist identisch mit: ParRob/constr3grad_x.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.


% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_x_red, Phi_x] = %PN%_constr3grad_x(q, xE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(6,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs         'I1J_LEG', zeros(%NLEG%,1),
%$cgargs         'I2J_LEG', zeros(%NLEG%,1),
%$cgargs    'I_constr_red', coder.newtype('double',[1,inf]),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', zeros(%NLEG%,1),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung
s_1 = struct(     'I_EE', s.I_EE,...
                  'NLEG', %NLEG%);
                
s_2 = struct(     'I_EE', s.I_EE,...
                  'NLEG', %NLEG%);   

s_3 = struct(     'I_EE', s.I_EE,...
                  'NLEG', %NLEG%);

s_4 = struct(     'I_EE', s.I_EE,...
               'I1J_LEG', s.I1J_LEG,...
               'I2J_LEG', s.I2J_LEG,...
           'phi_P_B_all', s.phi_P_B_all,...
                 'T_P_E', s.T_P_E,...
           'phiconv_W_E', s.phiconv_W_E,...
          'Leg_pkin_gen', s.Leg_pkin_gen,...
         'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
         'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
          'Leg_I_EElink', s.Leg_I_EElink,...
         'Leg_I_EE_Task', s.Leg_I_EE_Task,...
           'Leg_phi_W_0', s.Leg_phi_W_0,...
       'Leg_phiconv_W_0', s.Leg_phiconv_W_0);                

%% Aufruf der Unterfunktionen
% Die Unterfunktionen sind nach ZB-Art sortiert, in der Ausgabevariablen
% ist die Sortierung nach Beingruppen (ZB Bein 1, ZB Bein 2, ...)
[~, Phi_tt] = %PN%_constr2grad_tt(s_1);  % Translation identisch mit Var. 2
[~, Phi_tr] = %PN%_constr2grad_tr(xE, s_2);% Translation identisch mit Var. 2
[~, Phi_rt] = %PN%_constr3grad_rt(s_3);
[~, Phi_rr] = %PN%_constr3grad_rr(q, xE, s_4);

%% Sortierung der ZB-Zeilen in den Matrizen nach Beingruppen, nicht nach ZB-Art
% Initialisierung mit Fallunterscheidung fÃ¼r symbolische Eingabe
Phi_x = NaN(6*%NLEG%, 6);

% Stelle vollständige Matrix zusammen
for i = 1:%NLEG%
  Phi_x((i-1)*6+1:(i)*6, :) = ...
    [Phi_tt((i-1)*3+1:(i)*3, :), Phi_tr((i-1)*3+1:(i)*3, :); ...
     Phi_rt((i-1)*3+1:(i)*3, :), Phi_rr((i-1)*3+1:(i)*3, :)];
end
% Stelle Matrix mit reduzierten ZB zusammen
Phi_x_red = Phi_x(s.I_constr_red, s.I_EE);
