% Ableitung der Translationskomponente der kinematischen ZB nach der EE-Orientierung
% Rotation ausgedrückt in XYZ-Euler-Winkeln
% 
% Eingabe:
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phix_phi_red
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phix_phi [3xN]
%   Ableitung der Translations-ZB nach der EE-Orientierung.
%
% Diese Datei ist identisch mit: ParRob/constr1grad_tr.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.


% Quellen:
% [A] Aufzeichnungen Schappler vom 15.06.2018 und 19.06.2018
% [B] Aufzeichnungen Schappler vom 21.06.2018

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phix_phi_red, Phix_phi] = %PN%_constr1grad_tr(xE,s)

%% Coder Information
%#codegen
%$cgargs {zeros(6,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs  'I_constr_t_red', coder.newtype('double',[1,inf]),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6))}

%% Initialisierung

NLEG = %NLEG%;

%% Initialisierung mit Fallunterscheidung für symbolische Eingabe
dim_P_tr = [3*NLEG,3];
dim_P_tr_red = [length(s.I_constr_t_red), sum(s.I_EE(4:6))];

Phix_phi = zeros(dim_P_tr);
Phix_phi_red = zeros(dim_P_tr_red);


phi = xE(4:6); % Euler-Winkel
Jw = euljac(phi, s.phiconv_W_E); % Euler-Jacobi-Matrix für EE-Orientierung
R_0_E = eul2r(phi, s.phiconv_W_E);
r_P_B_all = s.r_P_B_all;
T_P_E = s.T_P_E;
r_P_P_E = T_P_E(1:3,4);
%% Berechnung
% Plattform-Koppelpunkt-Jacobi
for i = 1:NLEG
  % translatorischer Anteil
  r_P_P_Bi = r_P_B_all(:,i);
  r_E_E_Bi = T_P_E(1:3,1:3)' * (-r_P_P_E + r_P_P_Bi);

  % Auf vorhandene Koordinaten reduzieren:
  % Auswahl [1 2 3]: x-y-z-Komponenten der translatorischen Zwangsbedingungen
  % Auswahl [1 2 3]: phix, phiy, phiz (z.B. für XYZ-Euler-Winkel)
  I1 = 3*(i-1)+1;
  % Gl. (A.36-37)
  phi_xp = skew(R_0_E*r_E_E_Bi)*Jw;
  Phix_phi(I1:I1+2,:) = phi_xp;
  
  J1 = sum(s.I_EE(1:3))*(i-1)+1;
  Phix_phi_red(J1:J1+sum(s.Leg_I_EE_Task(i,1:3))-1,:) = phi_xp(s.Leg_I_EE_Task(i,1:3),s.I_EE(4:6));
end
