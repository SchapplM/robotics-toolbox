% Direkte Kinematik für alle KS bzw. Gelenkpositionen der PKM, die für
% Kollisionen notwendig sind
% 
% Eingabe:
% q:
%   Gelenkkoordinaten
% s:
%   Struktur mit Einstellungen für diese Funktion. Enthält die Parameter
%   des Roboters, die sonst in der ParRob-Klasse gespeichert sind.
% 
% Ausgabe:
% Tc_stack_PKM [3*N x 4] (N ist die Anzahl der benutzten Körper-KS)
%   Gestapelte Transformationsmatrizen der PKM. Im Basis-KS. 
%   Entspricht mit Abwandlung der Anordnung wie in fkine: 
%   * PKM-Basis
%   * Für jede Beinkette: Basis und alle bewegten Körper-KS. Ohne
%     virtuelles EE-KS
%   * Plattform-KS
% JointPos_all
%   gestapelte Positionen aller Gelenke der PKM (als Zeilenvektor)
%   (Letzte Spalte von Tc_stack_PKM)
% 
% Diese Datei ist identisch mit ParRob/fkine_coll
% Hier Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2021-06
% (C) Institut für Mechatronische Systeme, Leibniz Universität Hannover

function [Tc_stack_PKM, JointPos_all] = %PN%_fkine_coll(q, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1), struct(
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%))}
assert(all(size(q) == [%NJ% 1]), 'q muss NJ% x 1 sein');

%% Initialisierung
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
Leg_NL = %Leg_NL%;
NLEG = %NLEG%;
NL = %NL%;

Tc_stack_PKM = NaN((NL+NLEG)*3,4); % siehe fkine_legs; dort aber leicht anders
% Basis-KS. Trägt keine Information. Dient nur zum einfacheren Zugriff auf
% die Variable und zur Angleichung an Darstellung im Welt-KS.
Tc_stack_PKM(1:3,1:4) = eye(3,4); % Basis-KS im Basis-KS.
out3_ind1 = 3; % Zeilenzähler für obige Variable (drei Zeilen stehen schon)
for iLeg = 1:NLEG
  q_i = q(I1J_LEG(iLeg):I2J_LEG(iLeg));
  [~, Tc_stack_0i] = %SN%_fkine_fixb_rotmat_mdh_sym_varpar(q_i, s.Leg_pkin_gen(iLeg,:)');
  Leg_T_0_W = [eulxyz2r(s.Leg_T_0_W_vec(1:3,iLeg)),s.Leg_T_0_W_vec(4:6,iLeg);[0 0 0 1]];
  T_0_0i = invtr(Leg_T_0_W);
  % Umrechnung auf PKM-Basis-KS. Nehme nur die KS, die auch einem Körper
  % zugeordnet sind. In Tc_stack_0i bei hybriden Systemen teilw. mehr.
  Tc_stack_0 = NaN(3*(Leg_NL(iLeg)),4);
  for kk = 1:Leg_NL(iLeg)
    Tc_stack_k = Tc_stack_0i(3*(kk-1)+1:kk*3,1:4);
    T_0_kk = T_0_0i * [Tc_stack_k;0 0 0 1];
    Tc_stack_0((kk-1)*3+1:kk*3,1:4) = T_0_kk(1:3,:);
  end
  % Eintragen in Ergebnis-Variable
  Tc_stack_PKM(out3_ind1+(1:3*Leg_NL(iLeg)),:) = Tc_stack_0;
  out3_ind1 = out3_ind1 + 3*Leg_NL(iLeg);
end
% Plattform-KS aus den Daten der ersten Beinkette eintragen
T_0_N1 = [Tc_stack_PKM(3+(3*Leg_NL(1)-2:3*Leg_NL(1)),:); [0 0 0 1]];
% Bei einigen 2T1R-PKM zusätzliche Trafo N-E für Beinkette
T_N1_E1 = [eulxyz2r(s.Leg_T_N_E_vec(1:3,1)),s.Leg_T_N_E_vec(4:6,1);[0 0 0 1]];
T_0_E1 = T_0_N1 * T_N1_E1;
R_P_B1 = eulxyz2r(s.phi_P_B_all(:,1));
r_P_P_B1 = s.r_P_B_all(:,1);
T_P_B1 = [[R_P_B1, r_P_P_B1]; [0 0 0 1]];
T_0_P_via1 = T_0_E1 * invtr(T_P_B1);
Tc_stack_PKM(end-2:end,:) = T_0_P_via1(1:3,:);
% Positionen in separate Ausgabe extrahieren
JointPos_all = Tc_stack_PKM(:,4)';
