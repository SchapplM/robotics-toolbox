% Ableitung der kinematischen Zwangsbedingungen nach den EE-Koordinaten
% Bezeichnungen: 
% * Jacobi-Matrix der direkten Kinematik, 
% * geometrische Matrix der direkten Kinematik
% 
% Variante 2:
% * Absolute Rotation ausgedrückt in XYZ-Euler-Winkeln
% * Rotationsfehler ausgedrückt in ZYX-Euler-Winkeln
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phi_x_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_x [6xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
%
% Diese Datei ist identisch mit: ParRob/constr2grad_x.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_x_red, Phi_x] = %PN%_constr2grad_x(q, xE, s)
%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(6,1), struct(
%$cgargs       'I_EE_Task', true(1,6),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung
I_EE = %I_EE%;

s_3 = struct('I_EE_Task', s.I_EE_Task);

s_4 = struct(...
           'phi_P_B_all', s.phi_P_B_all,...
                 'T_P_E', s.T_P_E,...
           'phiconv_W_E', s.phiconv_W_E,...
          'Leg_pkin_gen', s.Leg_pkin_gen,...
         'Leg_T_N_E_vec', s.Leg_T_N_E_vec,...
         'Leg_T_0_W_vec', s.Leg_T_0_W_vec,...
         'Leg_I_EE_Task', s.Leg_I_EE_Task,...
           'Leg_phi_W_0', s.Leg_phi_W_0,...
       'Leg_phiconv_W_0', s.Leg_phiconv_W_0);                
% Indizes für Reduktion der Zwangsbedingungen bei 3T2R: Nur für
% symmetrische 3T2R-PKM
I_constr_red = 1:6*%NLEG%;
if %NJ% == 25 % Behelf zur Erkennung symmetrischer 3T2R-PKM
  I_constr_red(4:6:end) = []; % entspricht z-Euler-Winkel
end

%% Aufruf der Unterfunktionen
% Die Unterfunktionen sind nach ZB-Art sortiert, in der Ausgabevariablen
% ist die Sortierung nach Beingruppen (ZB Bein 1, ZB Bein 2, ...)
[~, Phi_tt] = %PN%_constr2grad_tt();
[~, Phi_tr] = %PN%_constr2grad_tr(xE);
[~, Phi_rt] = %PN%_constr2grad_rt(s_3);
[~, Phi_rr] = %PN%_constr2grad_rr(q, xE, s_4);

%% Sortierung der ZB-Zeilen in den Matrizen nach Beingruppen, nicht nach ZB-Art
% Initialisierung mit Fallunterscheidung für symbolische Eingabe
Phi_x = NaN(6*%NLEG%, 6);

for i = 1:%NLEG%
  Phi_x((i-1)*6+1:(i)*6, :) = ...
    [Phi_tt((i-1)*3+1:(i)*3, :), Phi_tr((i-1)*3+1:(i)*3, :); ...
     Phi_rt((i-1)*3+1:(i)*3, :), Phi_rr((i-1)*3+1:(i)*3, :)];
end
Phi_x_red = Phi_x(I_constr_red, I_EE);
