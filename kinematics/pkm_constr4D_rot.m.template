% Rotationskomponente der kinematischen ZB zwischen Ist- und Soll-
% Konfiguration (Zeitableitung)
% 
% Variante 4:
% * Bezogen auf Winkelgeschwindigkeit des Koppelpunktes Bi
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% qD [Nx1]
%   Geschwindigkeit aller Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% xDE [6x1]
%   Zeitableitung der Endeffektorpose des Roboters bezüglich des Basis-KS
% s [struct]
%   Struktur mit Eigenschaften des Roboters
% 
% Ausgabe:
% PhirD_red
%   Reduzierte kinematische Zwangsbedingungen (siehe folgendes)
%   Die Reduktion folgt aus der Klassenvariablen I_EE
% PhirD [6Mx1]
%   Kinematische Zwangsbedingungen des Roboters für alle M Beine: 
%   Maß für den Orientierungsfehler zwischen Ist-Pose aus
%   gegebenen Gelenkwinkeln q und Soll-Pose aus gegebenen EE-Koordinaten x
% 
% Diese Datei ist identisch mit: ParRob/constr4D_rot.m
% Hier Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% %VERSIONINFO%
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2020-08
% (C) Institut für Mechatronische Systeme, Leibniz Universität Hannover

function [PhirD_red, PhirD] = %PN%_constr4D_rot(q, qD, xE ,xDE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(%NJ%,1), zeros(6,1), zeros(6,1), struct(
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs           'T_P_E', eye(4),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung
assert(isreal(q) && all(size(q) == [%NJ% 1]), ...
  '%PN%_constr4D_rot: q muss %dx1 sein', %NJ%);
assert(isreal(qD) && all(size(qD) == [%NJ% 1]), ...
  '%PN%_constr4D_rot: qD muss %dx1 sein', %NJ%);
assert(isreal(xE) && all(size(xE) == [6 1]), ...
  '%PN%_constr4D_rot: xE muss 6x1 sein');
assert(isreal(xDE) && all(size(xDE) == [6 1]), ...
  '%PN%_constr4D_rot: xDE muss 6x1 sein');
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
Leg_I_EElink = %Leg_I_EElink%;
Leg_NQJ = %Leg_NQJ%;

% Allgemeine Definitionen
NLEG = %NLEG%;
phi = xE(4:6); % Euler-Winkel
Jw = eulxyzjac(phi); % Euler-Jacobi-Matrix für EE-Orientierung
PhirD = NaN(3*NLEG,1);
PhirD_red = NaN(length(s.I_constr_r_red),1);

%% Berechnung
I1 = 1;
K1 = 1;
for i = 1:NLEG
  % Definitionen für Beinkette i
  IJ_i = I1J_LEG(i):I2J_LEG(i);
  qs = q(IJ_i); % Gelenkwinkel dieser Kette 
  qsD = qD(IJ_i);
  phi_0_Ai = s.Leg_phi_W_0(:,i);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(i));
  % Geschwindigkeit des Koppelpunktes auf Plattform-Seite
  J0i_i_rotg = %SN%_jacobig_rot_sym_varpar(qs, Leg_I_EElink(i), s.Leg_pkin_gen(i,:)');
  J_Ai_Bi = R_0_0i*J0i_i_rotg;  % Bezug auf das Basis-KS der PKM
  V_bein = J_Ai_Bi*qsD;
  
  % Geschwindigkeit des Koppelpunktes auf Seite der Beinkette
  V_plat = Jw * xDE(4:6);
  
  % Geschwindigkeits-Zwangsbedingung entspricht Differenz am Koppelpunkt
  % (kein Punktbezug, da Plattform als Starrkörper für
  % Winkelgeschwindigkeit ausreicht).
  V_diff = V_bein - V_plat;
  PhirD(I1:I1+2) = V_diff;
  I1 = I1+3;
  % Ausgabe mit reduzierten Einträgen
  K2 = K1+sum(s.Leg_I_EE_Task(i,4:6))-1;
  PhirD_red(K1:K2) = V_diff(s.Leg_I_EE_Task(i,4:6));
  K1 = K2+1;
end
