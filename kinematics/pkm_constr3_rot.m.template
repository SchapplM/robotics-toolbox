% Rotationskomponente der kinematischen ZB zwischen Ist- und Soll-Konfiguration
% Vollständige Rotations- und Translationskomponenten
% Variante 3:
% * Implementierung mit Führungs-Beinkette und Folge-Beinketten 
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% xE [6x1]
%   Endeffektorpose des Roboters bezüglich des Basis-KS
% 
% Ausgabe:
% Phi_red
%   Reduzierte kinematische Zwangsbedingungen (siehe folgendes)
%   Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi [6Mx1]
%   Kinematische Zwangsbedingungen des Roboters für alle M Beine: 
%   Maß für den Orientierungsfehler zwischen Ist-Pose aus
%   gegebenen Gelenkwinkeln q und Soll-Pose aus gegebenen EE-Koordinaten x
%
% Diese Datei ist identisch mit: ParRob/constr3_rot.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Quellen:
% [2_SchapplerTapOrt2019a] Schappler, M. et al.: Modeling Parallel Robot
% Kinematics for 3T2R and 3T3R Tasks using Reciprocal Sets of Euler Angles
% (Arbeitstitel), Submitted to MDPI Robotics KaRD2, Version of 27.06.2019
% [A] Aufzeichnungen Schappler vom 27.07.2018
% [B] Aufzeichnungen Schappler vom 02.02.2019

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-07
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_red, Phi] = %PN%_constr3_rot(q, xE, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1),zeros(6,1), struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs         'I1J_LEG', zeros(%NLEG%,1),
%$cgargs         'I2J_LEG', zeros(%NLEG%,1),
%$cgargs  'I_constr_r_red', coder.newtype('double',[1,inf]),
%$cgargs       'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', zeros(%NLEG%,1),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)))}

%% Initialisierung

NLEG = %NLEG%;
Phi = NaN(3*NLEG,1);
Phi_red = NaN(length(s.I_constr_r_red),1);
R_0_E_q_L = zeros(3,3);
R_P_E = s.T_P_E(1:3,1:3);

%% Berechnung
R_0_E_x = eul2r(xE(4:6), s.phiconv_W_E); 
[~,phiconv_W_E_reci] = euler_angle_properties(s.phiconv_W_E);
K1 = 1; % Zähler für Zwangsbedingungen
for iLeg = 1:NLEG
  % Anteil der ZB-Gleichung der Gelenkkette
  % (Aus direkter Kinematik)
  IJ_i = s.I1J_LEG(iLeg):s.I2J_LEG(iLeg);
  qs = q(IJ_i); % Gelenkwinkel dieser Kette
  Tc_0 = %SN%_fkine_fixb_rotmat_mdh_sym_varpar(qs, s.Leg_pkin_gen(iLeg,:)');
  Leg_T_N_E = [eulxyz2r(s.Leg_T_N_E_vec(1:3,iLeg)),s.Leg_T_N_E_vec(4:6,iLeg);[0 0 0 1]];
  T_0i_Bi = Tc_0(:,:,s.Leg_I_EElink(iLeg)+1)*Leg_T_N_E;
  
  % Fußpunkt-Orientierung
  phi_0_Ai = s.Leg_phi_W_0(:,iLeg);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(iLeg));
  R_P_Bi = eulxyz2r(s.phi_P_B_all(:,iLeg));
  R_Bi_P = R_P_Bi.';
  
  % Differenz-Rotation (z.B. mit XYZ-Euler-Winkel)
  % Kette: 0 -> 0i -> Bi -> E
  % (Bi und P sind gleich orientiert)

  if iLeg == 1 % Führungskette
    R_0_E_q_L = R_0_0i * T_0i_Bi(1:3,1:3) * R_Bi_P * R_P_E; % [2_SchapplerTapOrt2019a]/(26)
    % [2_SchapplerTapOrt2019a]/(19; [B] Gl. 16
    R_Ex_Eq = R_0_E_x' * R_0_E_q_L;
    phiL = r2eul(R_Ex_Eq, phiconv_W_E_reci); 
    J1 = 1+3*(iLeg-1);
    J2 = J1+2;
    Phi(J1:J2,:) = phiL;
  
  elseif iLeg > 1 % Folge-Kette
    % [2_SchapplerTapOrt2019a]/(27) Term 1
    R_0_E_q_f = R_0_0i * T_0i_Bi(1:3,1:3) * R_Bi_P * R_P_E; 
    % [2_SchapplerTapOrt2019a]/(27); [B] Gl. 18
    R_Lq_Eq = R_0_E_q_L' * R_0_E_q_f;
    phif = r2eul(R_Lq_Eq, phiconv_W_E_reci); 
    J1 = 1+3*(iLeg-1);
    J2 = J1+2;
    Phi(J1:J2,:) = phif;   
  end

  % Reduzierte Zwangsbedingungsgleichungen, für reduzierte EE-FG
  % Indizes für volle ZB
  J1 = 1+3*(iLeg-1);
  J2 = J1+2;
  % Indizes für reduzierte ZB
  K2 = K1+sum(s.Leg_I_EE_Task(iLeg,4:6))-1; % Anzahl der rot. ZB. dieser Beinkette

  % Auswahl der wirklich benötigten Einträge
  Phi_i = Phi(J1:J2,:);
  if all(s.Leg_I_EE_Task(iLeg,:) == logical([1 1 1 1 1 0]))
    Phi_red(K1:K2,:) = Phi_i([2 3]);
  else
    % TODO: Die Auswahl der ZB muss an die jeweilige Aufgabe angepasst
    % werden (3T1R, 3T3R); wegen der Reziprozität EE-FG / Residuum
    Phi_red(K1:K2,:) = Phi_i(s.Leg_I_EE_Task(iLeg,4:6));
  end
  K1 = K2 + 1;
end