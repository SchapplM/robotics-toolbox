% Ableitung der Translationskomponente der kinematischen ZB nach den
% Gelenkwinkeln und Ableitung dieser (Gradienten-)Matrix nach der Zeit
% 
% Variante 3:
% Implementierung mit Führungs-Beinkette und Folge-Beinketten
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% qD [Nx1]
%   Geschwindigkeit aller Gelenkwinkel aller serieller Beinketten der PKM
% 
% Ausgabe:
% PhiD_q_legs_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   und der Zeit; translatorischer Teil
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% PhiD_q_legs [3xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
% 
%
% Diese Datei ist identisch mit: ParRob/constr2gradD_tq.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [PhiD_q_legs_red, PhiD_q_legs] = %PN%_constr2gradD_tq(q, qD, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1), zeros(%NJ%,1),struct(
%$cgargs            'I_EE', true(1,6),
%$cgargs         'I1J_LEG', zeros(%NLEG%,1),
%$cgargs         'I2J_LEG', zeros(%NLEG%,1),
%$cgargs  'I_constr_t_red', coder.newtype('double',[1,inf]),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', zeros(%NLEG%,1),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1))}


NLEG = %NLEG%;
NJ = %NJ%;

PhiD_q_legs = NaN(3*NLEG,NJ);
PhiD_q_legs_red = NaN(length(s.I_constr_t_red),NJ);
T_P_E = s.T_P_E;
r_P_P_E = T_P_E(1:3,4);

%% Berechnung
% Berechnung aus dem translatorischen Teil der Jacobi-Matrix der seriellen
% Beinketten. Davon muss lediglich die Zeitableitung gebildet werden.
for i = 1:NLEG
  IJ_i = s.I1J_LEG(i):s.I2J_LEG(i);
  q_i = q(IJ_i); % Gelenkwinkel dieser Kette
  qD_i = qD(IJ_i); % Gelenkgeschw. dieser Kette
  
  phi_0_Ai = s.Leg_phi_W_0(:,i);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(i));
  
  r_N_E = s.Leg_T_N_E_vec(4:6,i);
  JD0i_i_trans = %SN%_jacobiaD_transl_sym_varpar(q_i, qD_i,uint8(s.Leg_I_EElink(i)), r_N_E, s.Leg_pkin_gen(i,:)'); % Zeitableitung der Jacobi
  JD0_i_trans = R_0_0i*JD0i_i_trans; % Bezug auf das Basis-KS der PKM
  JD_Ai_Bi = JD0_i_trans; % Nur xyz-Koordinate in ZB.
  % Berücksichtigung des zusätzlichen "Hebelarms" vom Koppelpunkt zum EE
  JD0i_i_rot = %SN%_jacobigD_rot_sym_varpar(q_i, qD_i, uint8(s.Leg_I_EElink(i)), s.Leg_pkin_gen(i,:)');
  JD0_i_rot = R_0_0i*JD0i_i_rot;
  J0i_i_rot = %SN%_jacobig_rot_sym_varpar(q_i, uint8(s.Leg_I_EElink(i)), s.Leg_pkin_gen(i,:)');
  J0_i_rot = R_0_0i*J0i_i_rot;
  omega_0_Bi  = J0_i_rot *qD_i;
  
  Leg_T_N_E = [eulxyz2r(s.Leg_T_N_E_vec(1:3,i)),s.Leg_T_N_E_vec(4:6,i);[0 0 0 1]];
  Tc_0 = %SN%_fkine_fixb_rotmat_mdh_sym_varpar(q_i, s.Leg_pkin_gen(i,:)');
  T_0i_Bi = Tc_0(:,:,uint8(s.Leg_I_EElink(i))+1)*Leg_T_N_E;
  R_0i_Bi = T_0i_Bi(1:3,1:3);
  R_Bi_P = eulxyz2r(s.phi_P_B_all(:,i)).';
  R_0_Bi = R_0_0i * R_0i_Bi; 
  R_0_P = R_0_Bi * R_Bi_P;
  
  r_P_P_Bi = s.r_P_B_all(:,i);
  r_P_Bi_P = -  r_P_P_Bi;
  r_B_E = R_0_P * (r_P_Bi_P + r_P_P_E);  
  % Umrechnung der vorher auf Koppelpunkt bezogenen Jacobi auf den Endeffektor
  % Siehe dazu adjoint_jacobian.m
  JD_0_E = JD_Ai_Bi + -skew(r_B_E) * JD0_i_rot + -skew(cross(omega_0_Bi, r_B_E)) * J0_i_rot;
  

  dPhidqJi = zeros(3*NLEG,s.Leg_NQJ(i));
  dPhidqJi_red = zeros(sum(s.I_EE(1:3))*NLEG,s.Leg_NQJ(i));

  
  % Kein negatives Vorzeichen, siehe Definition der Zwangsbedingungen
  dPhidqJi(3*(i-1)+1:3*(i),:) = JD_0_E;
  PhiD_q_legs(:,IJ_i) = dPhidqJi;
  
  % Eintragen in Ergebnis-Variable
  I1 = sum(s.I_EE(1:3))*(i-1)+1;
  I2 = I1+sum(s.I_EE(1:3))-1;
  if ~isempty(PhiD_q_legs_red)
    dPhidqJi_red(I1:I2,:) = JD_0_E(s.Leg_I_EE_Task(i,1:3),:);
    PhiD_q_legs_red(:,IJ_i) = dPhidqJi_red;
  end
end
