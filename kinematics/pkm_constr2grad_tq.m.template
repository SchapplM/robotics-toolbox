% Ableitung der Translationskomponente der kinematischen ZB nach den Gelenkwinkeln
% 
% Variante 2:
% * Andere Implementierung mit Vektor 0-P statt A-B
% * Translationsfehler ist Differenz zwischen Vektor berechnet aus x und q
% 
% Eingabe:
% q [Nx1]
%   Alle Gelenkwinkel aller serieller Beinketten der PKM
% 
% Ausgabe:
% Phi_q_legs_red
%   Ableitung der kinematischen Zwangsbedingungen nach allen Gelenkwinkeln
%   Translatorischer Teil
%   Reduzierte Zeilen: Die Reduktion folgt aus der Klassenvariablen I_EE
% Phi_q_legs [3xN]
%   Siehe vorher. Hier alle Zeilen der Zwangsbedingungen
% 
% Diese Datei ist identisch mit: ParRob/constr2grad_tq.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Quellen:
% [2_SchapplerTapOrt2019a] Schappler, M. et al.: Modeling Parallel Robot
% Kinematics for 3T2R and 3T3R Tasks using Reciprocal Sets of Euler Angles
% (Arbeitstitel), Submitted to MDPI Robotics KaRD2, Version of 27.06.2019
% [A] Aufzeichnungen Schappler vom 15.06.2018
% [B] Aufzeichnungen Schappler vom 22.06.2018

% Moritz Schappler, moritz.schappler@imes.uni-hannover.de, 2018-10
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [Phi_q_legs_red, Phi_q_legs] = %PN%_constr2grad_tq(q, s)

%% Coder Information
%#codegen
%$cgargs {zeros(%NJ%,1), struct(
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs    'Leg_I_EElink', zeros(%NLEG%,1),
%$cgargs     'Leg_phi_W_0', zeros(3,%NLEG%),
%$cgargs 'Leg_phiconv_W_0', uint8(zeros(%NLEG%,1)),
%$cgargs         'Leg_NQJ', zeros(%NLEG%,1))}

%% Initialisierung
NLEG = %NLEG%;
I_EE = %I_EE%;
NJ = %NJ%;
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;

%% Initialisierung mit Fallunterscheidung für symbolische Eingabe
Phi_q_legs = NaN(3*NLEG,NJ);
Phi_q_legs_red = NaN(sum(I_EE(1:3))*NLEG,NJ);


%% Berechnung
% Berechnung aus dem translatorischen Teil der Jacobi-Matrix der seriellen
% Beinketten 
for i = 1:NLEG
  IJ_i = I1J_LEG(i):I2J_LEG(i);
  qs = q(IJ_i); % Gelenkwinkel dieser Kette
  
  phi_0_Ai = s.Leg_phi_W_0(:,i);
  R_0_0i = eul2r(phi_0_Ai, s.Leg_phiconv_W_0(i));
  
  % Jacobi-Matrix der Beinkette, bezogen auf den Koppelpunkt
  r_N_E = s.Leg_T_N_E_vec(4:6,i);
  J0i_i_trans = %SN%_jacobia_transl_sym_varpar(qs, uint8(s.Leg_I_EElink(i)),r_N_E,s.Leg_pkin_gen(i,:)');
  J0_i_trans = R_0_0i*J0i_i_trans; % Bezug auf das Basis-KS der PKM
  J_Ai_Bi = J0_i_trans; % Nur xyz-Koordinate in ZB.
  % Berücksichtigung des zusätzlichen "Hebelarms" vom Koppelpunkt zum EE
  J0i_i_rot = %SN%_jacobig_rot_sym_varpar(qs, uint8(s.Leg_I_EElink(i)), s.Leg_pkin_gen(i,:)');
  J0_i_rot = R_0_0i*J0i_i_rot;
  
  Tc_0 = %SN%_fkine_fixb_rotmat_mdh_sym_varpar(qs, s.Leg_pkin_gen(i,:)');
  Leg_T_N_E = [eulxyz2r(s.Leg_T_N_E_vec(1:3,i)),s.Leg_T_N_E_vec(4:6,i);[0 0 0 1]];
  T_0i_Bi = Tc_0(:,:,s.Leg_I_EElink(i)+1)*Leg_T_N_E;
  R_0i_Bi = T_0i_Bi(1:3,1:3);
  R_0_Bi = R_0_0i * R_0i_Bi; 
  R_Bi_P = eulxyz2r(s.phi_P_B_all(:,i)).';
  R_0_Bi = R_0_0i * R_0i_Bi; 
  R_0_P = R_0_Bi * R_Bi_P;

  r_P_E = s.T_P_E(1:3,4);
  r_P_P_Bi = s.r_P_B_all(:,i);
  r_P_Bi_P = -  r_P_P_Bi;
  r_B_E = R_0_P * (r_P_Bi_P + r_P_E); 
  % Umrechnung der vorher auf Koppelpunkt bezogenen Jacobi auf den Endeffektor
  % Siehe dazu adjoint_jacobian.m
  J_0_E = J_Ai_Bi + -skew(r_B_E) * J0_i_rot;
  

  dPhidqJi = zeros(3*NLEG,s.Leg_NQJ(i));
  dPhidqJi_red = zeros(sum(I_EE(1:3))*NLEG,s.Leg_NQJ(i));

  
  % [2_SchapplerTapOrt2019a]/(A15); Gl. (A.25-26, B.23)
  % Kein negatives Vorzeichen, siehe Definition der Zwangsbedingungen
  dPhidqJi(3*(i-1)+1:3*(i),:) = J_0_E;
  Phi_q_legs(:,IJ_i) = dPhidqJi;
  
  % Eintragen in Ergebnis-Variable
  I1 = sum(I_EE(1:3))*(i-1)+1;
  I2 = I1+sum(I_EE(1:3))-1;
  dPhidqJi_red(I1:I2,:) = J_0_E(I_EE(1:3),:);
  Phi_q_legs_red(:,IJ_i) = dPhidqJi_red;
end
