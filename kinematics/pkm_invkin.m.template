% Inverse Kinematik basierend auf Euler-Winkel-Residuum für
%  
%
% Eingabe:
% xE_soll
%   EE-Lage (Sollwert)
% q0
%   Anfangs-Gelenkwinkel für Algorithmus
% s
%   Struktur mit Eingabedaten. Felder, siehe Quelltext.
%
% Ausgabe:
% q
%   Lösung der IK
% Phi
%   Restfehler mit der IK-Lösung
% Tc_stack_PKM 
%   Gestapelte Transformationsmatrizen der PKM. Im Basis-KS.
%   Entspricht mit Abwandlung der Anordnung wie in fkine:
%   * PKM-Basis
%   * Für jede Beinkette: Basis und alle bewegten Körper-KS. Ohne
%     virtuelles EE-KS
%   * Kein Plattform-KS
% Stats
%   Struktur mit Detail-Ergebnissen für den Verlauf der Berechnung
%
% Diese Datei ist identisch mit: ParRob/invkin_ser.m
% Generierung einer kompilierbaren Matlab-Funktion aus Vorlage.

% Quelle:
% [SchapplerTapOrt2019] Schappler, M. et al.: Resolution of Functional
% Redundancy for 3T2R Robot Tasks using Two Sets of Reciprocal Euler
% Angles, Proc. of the 15th IFToMM World Congress, 2019
% [1] Aufzeichnungen Schappler vom 3.8.2018

% %VERSIONINFO%
% Junnan Li, moritz.schappler@imes.uni-hannover.de, 2020-02
% (C) Institut für Mechatronische Systeme, Universität Hannover

function [q, Phi, Tc_stack_PKM, Stats] = %PN%_invkin(xE_soll, q0, s_par, s_ser)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(%NJ%,1),struct(
%$cgargs       'r_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phi_P_B_all', zeros(3,%NLEG%),
%$cgargs     'phiconv_W_E', uint8(2),
%$cgargs     'I1constr_red', zeros(1,%NLEG%),
%$cgargs     'I2constr_red', zeros(1,%NLEG%),
%$cgargs           'T_P_E', zeros(4,4),
%$cgargs   'Leg_I_EE_Task', true(%NLEG%,6),
%$cgargs    'Leg_pkin_gen', zeros(%NLEG%,%NKP%),
%$cgargs   'Leg_T_N_E_vec', zeros(6,%NLEG%),
%$cgargs   'Leg_T_0_W_vec', zeros(6,%NLEG%),
%$cgargs       'I_EE_Task', true(1,6),
%$cgargs      'Leg_sigmaJ', zeros(%NQJ%,%NLEG%),
%$cgargs        'Leg_qlim', zeros(6,2*%NLEG%),
%$cgargs  'Leg_phiconv_W_E', uint8(zeros(%NLEG%,1)),
%$cgargs 'abort_firstlegerror', false),
%$cgargs  struct(   'reci', true,
%$cgargs               'K', zeros(%NQJ%,1),
%$cgargs              'Kn', zeros(%NQJ%,1),
%$cgargs              'wn', zeros(3,1),
%$cgargs       'scale_lim', 0,
%$cgargs      'maxrelstep', 0.1,
%$cgargs       'normalize', false,
%$cgargs      'condlimDLS', 60,
%$cgargs      'lambda_min', 2e-4,
%$cgargs           'n_min', 0,
%$cgargs           'n_max', 1000,
%$cgargs        'rng_seed', NaN,
%$cgargs        'Phit_tol', 1.0000e-10,
%$cgargs        'Phir_tol', 1.0000e-10,
%$cgargs     'retry_limit', 100)}
coder.extrinsic('fprintf');

%% Initialisierung

phiconv_W_E = s_par.phiconv_W_E;
I1constr_red = s_par.I1constr_red;
I2constr_red = s_par.I2constr_red;
r_P_B_all = s_par.r_P_B_all;
T_P_E = s_par.T_P_E;
NLEG = %NLEG%;
I1J_LEG = %I1J_LEG%;
I2J_LEG = %I2J_LEG%;
Leg_I_EElink = %Leg_I_EElink%;
Leg_NQJ = %Leg_NQJ%;
phi_P_B_all = s_par.phi_P_B_all;
I_EE_Task = s_par.I_EE_Task;
if all(I_EE_Task == logical([1 1 1 1 1 0]))
  s_ser.reci = true; % bei 3T2R geht es nicht ohne reziproke Winkel
end

% struct für invkin_eulangresidual.m
s = struct('pkin', zeros(%NKP%,1),...
         'sigmaJ', zeros(%NQJ%,1),...
           'qlim', zeros(%NQJ%,2),...
           'I_EE', true(1,6),...
    'phiconv_W_E', uint8(2),...
       'I_EElink', uint8(0),...
           'reci', s_ser.reci,...
          'T_N_E', zeros(4,4),...
              'K', s_ser.K,...
             'Kn', s_ser.Kn,...
             'wn', s_ser.wn,...
      'scale_lim', s_ser.scale_lim,...
     'maxrelstep', s_ser.maxrelstep,...
      'normalize', s_ser.normalize,...
     'condlimDLS', s_ser.condlimDLS,...
     'lambda_min', s_ser.lambda_min,...
          'n_min', s_ser.n_min,...
          'n_max', s_ser.n_max,...
       'rng_seed', s_ser.rng_seed,...
       'Phit_tol', s_ser.Phit_tol,...
       'Phir_tol', s_ser.Phir_tol,...
    'retry_limit', s_ser.retry_limit);

% Eingaben der serielle Beinkette

Leg_I_EE_Task = s_par.Leg_I_EE_Task;%(%NLEG%,6)
Leg_T_N_E_vec = s_par.Leg_T_N_E_vec;% 6 x NLEG 
Leg_T_0_W_vec = s_par.Leg_T_0_W_vec;
Leg_pkin_gen = s_par.Leg_pkin_gen;%(%NLEG%,%NKP%)

Phi_ser = NaN(I2constr_red(end),1);
Phi = Phi_ser;
q = q0;

r_P_P_B_ges = r_P_B_all;
T_0_E = [eul2r(xE_soll(4:6), phiconv_W_E), xE_soll(1:3); [0 0 0 1]];

% Zählung in Rob.NL: Starrkörper der Beinketten, Gestell und Plattform. 
% Hier werden nur die Basis-KS der Beinketten und alle bewegten Körper-KS
% der Beine angegeben.
Tc_stack_PKM = NaN((%NL%-1+%NLEG%)*3,4); % siehe fkine_legs; dort aber leicht anders
% Basis-KS. Trägt keine Information. Dient nur zum einfacheren Zugriff auf
% die Variable und zur Angleichung an Darstellung im Welt-KS.
Tc_stack_PKM(1:3,1:4) = eye(3,4); % Basis-KS im Basis-KS.
out3_ind1 = 3; % Zeilenzähler für obige Variable (drei Zeilen stehen schon)
if nargout == 4
  Stats = struct('Q', NaN(s.n_max, %NJ%), 'PHI', NaN(s.n_max, 6*%NLEG%), ...
    'iter', repmat(s.n_max,1,%NLEG%), 'retry_number', zeros(1,%NLEG%), ...
    'condJ', NaN(s.n_max,%NLEG%), 'lambda', NaN(s.n_max,2*%NLEG%));
end

for i = 1:NLEG
  % Überschreibe evtl übergebene I_EE für PKM. Das I_EE hier gilt für die Beinkette
  % Damit wird der Standardwert gesetzt, der sowieso in SerRob/invkin2
  % genutzt wird
  s.I_EE = Leg_I_EE_Task(i,:);
  s.pkin = Leg_pkin_gen(i,:)';
  s.sigmaJ = s_par.Leg_sigmaJ(:,i);
  s.qlim(1:Leg_NQJ(i),1:2) = s_par.Leg_qlim(1:Leg_NQJ(i),(1+2*(i-1)):(2+2*(i-1)));
  s.phiconv_W_E = s_par.Leg_phiconv_W_E(i);
  s.I_EElink = Leg_I_EElink(i);

  % Initialisierung: Startwerte der IK
  if i == 1 || all(~isnan(q0(I1J_LEG(i):I2J_LEG(i))))
    q0_i = q0(I1J_LEG(i):I2J_LEG(i));
  else
    % Nehme die Startwerte für die IK der weiteren Beinkette aus den Er-
    % gebnissen der ersten. Dadurch hoffentlich symmetrisches Ergebnis.
    q0_i = q(I1J_LEG(1):I2J_LEG(1));
  end
  
  % Transformation vom letzten Beinketten-KS zum EE-KS der PKM bestimmen
  % Dafür wird die IK berechnet und dieser Wert wird übergeben
  r_P_P_Bi = r_P_P_B_ges(:,i); % Vektor von Koppelpunkt zum Plattform-KS
  T_P_Bi = [eulxyz2r(phi_P_B_all(:,i)), r_P_P_Bi; [0 0 0 1]];
  Leg_T_0_W = [eulxyz2r(Leg_T_0_W_vec(1:3,i)),Leg_T_0_W_vec(4:6,i);[0 0 0 1]];
  T_0i_0 = Leg_T_0_W;
  T_0i_E = T_0i_0 * T_0_E; % Transformation vom Basis-KS der Beinkette zum EE

  Leg_T_N_E = [eulxyz2r(Leg_T_N_E_vec(1:3,i)),Leg_T_N_E_vec(4:6,i);[0 0 0 1]];
  s.T_N_E = Leg_T_N_E * invtr(T_P_Bi) * T_P_E; % Anpassung der EE-Transformation der Beinkette für IK

  % Inverse Kinematik für die serielle Beinkette berechnen
  if nargout < 4
    [q_i, Phi_i, Tc_stack_0i] = %SN%_invkin_eulangresidual(T_0i_E(1:3,:), q0_i, s);
  else % Aufruf und Verarbeitung der Statistik
    [q_i, Phi_i, Tc_stack_0i, Stats_i] = %SN%_invkin_eulangresidual(T_0i_E(1:3,:), q0_i, s);
    Stats.Q(:,I1J_LEG(i):I2J_LEG(i)) = Stats_i.Q;
    Stats.PHI(:,(i-1)*6+1:6*i) = Stats_i.PHI;
    Stats.iter(i)= Stats_i.iter;
    Stats.retry_number(i) = Stats_i.retry_number;
    Stats.condJ(:,i) = Stats_i.condJ;
    Stats.lambda(:,(i-1)*2+1:2*i) = Stats_i.lambda;
  end
  if all(I_EE_Task == logical([1 1 1 1 1 0])) && i == 1
    if any(isnan(Phi_i))
      return
    end
    % 3T2R und Führungskette. Die erste Beinkette gibt die EE-Ori für die
    % anderen Beinketten vor.
    pkin = s.pkin;
    T_0i_Ni = %SN%_fkine_fixb_body_rotmat_mdh_sym_varpar(q_i, Leg_I_EElink(i), pkin);
    Leg_T_W_0 = invtr(Leg_T_0_W);
    T_0_Ni = Leg_T_W_0 * T_0i_Ni;
    T_0_Bi = T_0_Ni * Leg_T_N_E;
    % Aktualisiere die EE-Transformation auf die resultierend aus Bein 1
    T_0_E = T_0_Bi * invtr(T_P_Bi) * T_P_E;
  end
  % Ergebnisse für dieses Bein abspeichern
  q(I1J_LEG(i):I2J_LEG(i)) = q_i;
  Phi_ser(I1constr_red(i):I2constr_red(i)) = Phi_i;
  if nargout == 3
    T_0_0i = invtr(T_0i_0);
    % Umrechnung auf PKM-Basis-KS. Nehme nur die KS, die auch einem Körper
    % zugeordnet sind. In Tc_stack_0i bei hybriden Systemen teilw. mehr. 
    Tc_stack_0 = NaN(3*(Leg_NQJ(i)+1),4);
    for kk = 1:Leg_NQJ(i)+1
      Tr_0i_kk = Tc_stack_0i((kk-1)*3+1:kk*3,1:4);
      T_0_kk = T_0_0i * [Tr_0i_kk;[0 0 0 1]];
      Tc_stack_0((kk-1)*3+1:kk*3,1:4) = T_0_kk(1:3,:);
    end
    % Eintragen in Ergebnis-Variable
    Tc_stack_PKM(out3_ind1+(1:3*(Leg_NQJ(i)+1)),:) = Tc_stack_0;
    out3_ind1 = out3_ind1 + 3*(Leg_NQJ(i)+1);
  end
  if s_par.abort_firstlegerror && any(any(isnan(Phi_i)) || ...
      any(Phi_i > max([s_ser.Phit_tol; s_ser.Phir_tol]))) % TODO: Unterscheidung transl./rot. ZB.
    break; % Erste Beinkette funktioniert nicht. Restliche sind egal. Abbruch
  end
end
Phi = Phi_ser;
